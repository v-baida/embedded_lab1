
laba.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003efc  080001b0  080001b0  000101b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080040ac  080040ac  000140ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040dc  080040dc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080040dc  080040dc  000140dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040e4  080040e4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040e8  080040e8  000140e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080040ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          000001c8  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001dc  200001dc  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a78f  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019d5  00000000  00000000  0002a7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000720  00000000  00000000  0002c1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000678  00000000  00000000  0002c8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b9d  00000000  00000000  0002cf40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009caa  00000000  00000000  0004fadd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1783  00000000  00000000  00059787  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0012af0a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001c30  00000000  00000000  0012af60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004094 	.word	0x08004094

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08004094 	.word	0x08004094

080001f0 <__aeabi_dmul>:
 80001f0:	b570      	push	{r4, r5, r6, lr}
 80001f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001fe:	bf1d      	ittte	ne
 8000200:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000204:	ea94 0f0c 	teqne	r4, ip
 8000208:	ea95 0f0c 	teqne	r5, ip
 800020c:	f000 f8de 	bleq	80003cc <__aeabi_dmul+0x1dc>
 8000210:	442c      	add	r4, r5
 8000212:	ea81 0603 	eor.w	r6, r1, r3
 8000216:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800021a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800021e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000222:	bf18      	it	ne
 8000224:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000228:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800022c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000230:	d038      	beq.n	80002a4 <__aeabi_dmul+0xb4>
 8000232:	fba0 ce02 	umull	ip, lr, r0, r2
 8000236:	f04f 0500 	mov.w	r5, #0
 800023a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800023e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000242:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000246:	f04f 0600 	mov.w	r6, #0
 800024a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800024e:	f09c 0f00 	teq	ip, #0
 8000252:	bf18      	it	ne
 8000254:	f04e 0e01 	orrne.w	lr, lr, #1
 8000258:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800025c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000260:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000264:	d204      	bcs.n	8000270 <__aeabi_dmul+0x80>
 8000266:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800026a:	416d      	adcs	r5, r5
 800026c:	eb46 0606 	adc.w	r6, r6, r6
 8000270:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000274:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000278:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800027c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000280:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000284:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000288:	bf88      	it	hi
 800028a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800028e:	d81e      	bhi.n	80002ce <__aeabi_dmul+0xde>
 8000290:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000294:	bf08      	it	eq
 8000296:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800029a:	f150 0000 	adcs.w	r0, r0, #0
 800029e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002a8:	ea46 0101 	orr.w	r1, r6, r1
 80002ac:	ea40 0002 	orr.w	r0, r0, r2
 80002b0:	ea81 0103 	eor.w	r1, r1, r3
 80002b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002b8:	bfc2      	ittt	gt
 80002ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002c2:	bd70      	popgt	{r4, r5, r6, pc}
 80002c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002c8:	f04f 0e00 	mov.w	lr, #0
 80002cc:	3c01      	subs	r4, #1
 80002ce:	f300 80ab 	bgt.w	8000428 <__aeabi_dmul+0x238>
 80002d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002d6:	bfde      	ittt	le
 80002d8:	2000      	movle	r0, #0
 80002da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002de:	bd70      	pople	{r4, r5, r6, pc}
 80002e0:	f1c4 0400 	rsb	r4, r4, #0
 80002e4:	3c20      	subs	r4, #32
 80002e6:	da35      	bge.n	8000354 <__aeabi_dmul+0x164>
 80002e8:	340c      	adds	r4, #12
 80002ea:	dc1b      	bgt.n	8000324 <__aeabi_dmul+0x134>
 80002ec:	f104 0414 	add.w	r4, r4, #20
 80002f0:	f1c4 0520 	rsb	r5, r4, #32
 80002f4:	fa00 f305 	lsl.w	r3, r0, r5
 80002f8:	fa20 f004 	lsr.w	r0, r0, r4
 80002fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000300:	ea40 0002 	orr.w	r0, r0, r2
 8000304:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000308:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800030c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000310:	fa21 f604 	lsr.w	r6, r1, r4
 8000314:	eb42 0106 	adc.w	r1, r2, r6
 8000318:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800031c:	bf08      	it	eq
 800031e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f1c4 040c 	rsb	r4, r4, #12
 8000328:	f1c4 0520 	rsb	r5, r4, #32
 800032c:	fa00 f304 	lsl.w	r3, r0, r4
 8000330:	fa20 f005 	lsr.w	r0, r0, r5
 8000334:	fa01 f204 	lsl.w	r2, r1, r4
 8000338:	ea40 0002 	orr.w	r0, r0, r2
 800033c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	f141 0100 	adc.w	r1, r1, #0
 8000348:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800034c:	bf08      	it	eq
 800034e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000352:	bd70      	pop	{r4, r5, r6, pc}
 8000354:	f1c4 0520 	rsb	r5, r4, #32
 8000358:	fa00 f205 	lsl.w	r2, r0, r5
 800035c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000360:	fa20 f304 	lsr.w	r3, r0, r4
 8000364:	fa01 f205 	lsl.w	r2, r1, r5
 8000368:	ea43 0302 	orr.w	r3, r3, r2
 800036c:	fa21 f004 	lsr.w	r0, r1, r4
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	fa21 f204 	lsr.w	r2, r1, r4
 8000378:	ea20 0002 	bic.w	r0, r0, r2
 800037c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000380:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000384:	bf08      	it	eq
 8000386:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800038a:	bd70      	pop	{r4, r5, r6, pc}
 800038c:	f094 0f00 	teq	r4, #0
 8000390:	d10f      	bne.n	80003b2 <__aeabi_dmul+0x1c2>
 8000392:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000396:	0040      	lsls	r0, r0, #1
 8000398:	eb41 0101 	adc.w	r1, r1, r1
 800039c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003a0:	bf08      	it	eq
 80003a2:	3c01      	subeq	r4, #1
 80003a4:	d0f7      	beq.n	8000396 <__aeabi_dmul+0x1a6>
 80003a6:	ea41 0106 	orr.w	r1, r1, r6
 80003aa:	f095 0f00 	teq	r5, #0
 80003ae:	bf18      	it	ne
 80003b0:	4770      	bxne	lr
 80003b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003b6:	0052      	lsls	r2, r2, #1
 80003b8:	eb43 0303 	adc.w	r3, r3, r3
 80003bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003c0:	bf08      	it	eq
 80003c2:	3d01      	subeq	r5, #1
 80003c4:	d0f7      	beq.n	80003b6 <__aeabi_dmul+0x1c6>
 80003c6:	ea43 0306 	orr.w	r3, r3, r6
 80003ca:	4770      	bx	lr
 80003cc:	ea94 0f0c 	teq	r4, ip
 80003d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003d4:	bf18      	it	ne
 80003d6:	ea95 0f0c 	teqne	r5, ip
 80003da:	d00c      	beq.n	80003f6 <__aeabi_dmul+0x206>
 80003dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e0:	bf18      	it	ne
 80003e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003e6:	d1d1      	bne.n	800038c <__aeabi_dmul+0x19c>
 80003e8:	ea81 0103 	eor.w	r1, r1, r3
 80003ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f0:	f04f 0000 	mov.w	r0, #0
 80003f4:	bd70      	pop	{r4, r5, r6, pc}
 80003f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003fa:	bf06      	itte	eq
 80003fc:	4610      	moveq	r0, r2
 80003fe:	4619      	moveq	r1, r3
 8000400:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000404:	d019      	beq.n	800043a <__aeabi_dmul+0x24a>
 8000406:	ea94 0f0c 	teq	r4, ip
 800040a:	d102      	bne.n	8000412 <__aeabi_dmul+0x222>
 800040c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000410:	d113      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000412:	ea95 0f0c 	teq	r5, ip
 8000416:	d105      	bne.n	8000424 <__aeabi_dmul+0x234>
 8000418:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800041c:	bf1c      	itt	ne
 800041e:	4610      	movne	r0, r2
 8000420:	4619      	movne	r1, r3
 8000422:	d10a      	bne.n	800043a <__aeabi_dmul+0x24a>
 8000424:	ea81 0103 	eor.w	r1, r1, r3
 8000428:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800042c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd70      	pop	{r4, r5, r6, pc}
 800043a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800043e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000442:	bd70      	pop	{r4, r5, r6, pc}

08000444 <__aeabi_drsub>:
 8000444:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000448:	e002      	b.n	8000450 <__adddf3>
 800044a:	bf00      	nop

0800044c <__aeabi_dsub>:
 800044c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000450 <__adddf3>:
 8000450:	b530      	push	{r4, r5, lr}
 8000452:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000456:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800045a:	ea94 0f05 	teq	r4, r5
 800045e:	bf08      	it	eq
 8000460:	ea90 0f02 	teqeq	r0, r2
 8000464:	bf1f      	itttt	ne
 8000466:	ea54 0c00 	orrsne.w	ip, r4, r0
 800046a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800046e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000472:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000476:	f000 80e2 	beq.w	800063e <__adddf3+0x1ee>
 800047a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800047e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000482:	bfb8      	it	lt
 8000484:	426d      	neglt	r5, r5
 8000486:	dd0c      	ble.n	80004a2 <__adddf3+0x52>
 8000488:	442c      	add	r4, r5
 800048a:	ea80 0202 	eor.w	r2, r0, r2
 800048e:	ea81 0303 	eor.w	r3, r1, r3
 8000492:	ea82 0000 	eor.w	r0, r2, r0
 8000496:	ea83 0101 	eor.w	r1, r3, r1
 800049a:	ea80 0202 	eor.w	r2, r0, r2
 800049e:	ea81 0303 	eor.w	r3, r1, r3
 80004a2:	2d36      	cmp	r5, #54	; 0x36
 80004a4:	bf88      	it	hi
 80004a6:	bd30      	pophi	{r4, r5, pc}
 80004a8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004b0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004b4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004b8:	d002      	beq.n	80004c0 <__adddf3+0x70>
 80004ba:	4240      	negs	r0, r0
 80004bc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004c4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004c8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004cc:	d002      	beq.n	80004d4 <__adddf3+0x84>
 80004ce:	4252      	negs	r2, r2
 80004d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004d4:	ea94 0f05 	teq	r4, r5
 80004d8:	f000 80a7 	beq.w	800062a <__adddf3+0x1da>
 80004dc:	f1a4 0401 	sub.w	r4, r4, #1
 80004e0:	f1d5 0e20 	rsbs	lr, r5, #32
 80004e4:	db0d      	blt.n	8000502 <__adddf3+0xb2>
 80004e6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004ea:	fa22 f205 	lsr.w	r2, r2, r5
 80004ee:	1880      	adds	r0, r0, r2
 80004f0:	f141 0100 	adc.w	r1, r1, #0
 80004f4:	fa03 f20e 	lsl.w	r2, r3, lr
 80004f8:	1880      	adds	r0, r0, r2
 80004fa:	fa43 f305 	asr.w	r3, r3, r5
 80004fe:	4159      	adcs	r1, r3
 8000500:	e00e      	b.n	8000520 <__adddf3+0xd0>
 8000502:	f1a5 0520 	sub.w	r5, r5, #32
 8000506:	f10e 0e20 	add.w	lr, lr, #32
 800050a:	2a01      	cmp	r2, #1
 800050c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000510:	bf28      	it	cs
 8000512:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000516:	fa43 f305 	asr.w	r3, r3, r5
 800051a:	18c0      	adds	r0, r0, r3
 800051c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	d507      	bpl.n	8000536 <__adddf3+0xe6>
 8000526:	f04f 0e00 	mov.w	lr, #0
 800052a:	f1dc 0c00 	rsbs	ip, ip, #0
 800052e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000532:	eb6e 0101 	sbc.w	r1, lr, r1
 8000536:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800053a:	d31b      	bcc.n	8000574 <__adddf3+0x124>
 800053c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000540:	d30c      	bcc.n	800055c <__adddf3+0x10c>
 8000542:	0849      	lsrs	r1, r1, #1
 8000544:	ea5f 0030 	movs.w	r0, r0, rrx
 8000548:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800054c:	f104 0401 	add.w	r4, r4, #1
 8000550:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000554:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000558:	f080 809a 	bcs.w	8000690 <__adddf3+0x240>
 800055c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000560:	bf08      	it	eq
 8000562:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000566:	f150 0000 	adcs.w	r0, r0, #0
 800056a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800056e:	ea41 0105 	orr.w	r1, r1, r5
 8000572:	bd30      	pop	{r4, r5, pc}
 8000574:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000578:	4140      	adcs	r0, r0
 800057a:	eb41 0101 	adc.w	r1, r1, r1
 800057e:	3c01      	subs	r4, #1
 8000580:	bf28      	it	cs
 8000582:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000586:	d2e9      	bcs.n	800055c <__adddf3+0x10c>
 8000588:	f091 0f00 	teq	r1, #0
 800058c:	bf04      	itt	eq
 800058e:	4601      	moveq	r1, r0
 8000590:	2000      	moveq	r0, #0
 8000592:	fab1 f381 	clz	r3, r1
 8000596:	bf08      	it	eq
 8000598:	3320      	addeq	r3, #32
 800059a:	f1a3 030b 	sub.w	r3, r3, #11
 800059e:	f1b3 0220 	subs.w	r2, r3, #32
 80005a2:	da0c      	bge.n	80005be <__adddf3+0x16e>
 80005a4:	320c      	adds	r2, #12
 80005a6:	dd08      	ble.n	80005ba <__adddf3+0x16a>
 80005a8:	f102 0c14 	add.w	ip, r2, #20
 80005ac:	f1c2 020c 	rsb	r2, r2, #12
 80005b0:	fa01 f00c 	lsl.w	r0, r1, ip
 80005b4:	fa21 f102 	lsr.w	r1, r1, r2
 80005b8:	e00c      	b.n	80005d4 <__adddf3+0x184>
 80005ba:	f102 0214 	add.w	r2, r2, #20
 80005be:	bfd8      	it	le
 80005c0:	f1c2 0c20 	rsble	ip, r2, #32
 80005c4:	fa01 f102 	lsl.w	r1, r1, r2
 80005c8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005cc:	bfdc      	itt	le
 80005ce:	ea41 010c 	orrle.w	r1, r1, ip
 80005d2:	4090      	lslle	r0, r2
 80005d4:	1ae4      	subs	r4, r4, r3
 80005d6:	bfa2      	ittt	ge
 80005d8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005dc:	4329      	orrge	r1, r5
 80005de:	bd30      	popge	{r4, r5, pc}
 80005e0:	ea6f 0404 	mvn.w	r4, r4
 80005e4:	3c1f      	subs	r4, #31
 80005e6:	da1c      	bge.n	8000622 <__adddf3+0x1d2>
 80005e8:	340c      	adds	r4, #12
 80005ea:	dc0e      	bgt.n	800060a <__adddf3+0x1ba>
 80005ec:	f104 0414 	add.w	r4, r4, #20
 80005f0:	f1c4 0220 	rsb	r2, r4, #32
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f302 	lsl.w	r3, r1, r2
 80005fc:	ea40 0003 	orr.w	r0, r0, r3
 8000600:	fa21 f304 	lsr.w	r3, r1, r4
 8000604:	ea45 0103 	orr.w	r1, r5, r3
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	f1c4 040c 	rsb	r4, r4, #12
 800060e:	f1c4 0220 	rsb	r2, r4, #32
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 f304 	lsl.w	r3, r1, r4
 800061a:	ea40 0003 	orr.w	r0, r0, r3
 800061e:	4629      	mov	r1, r5
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	fa21 f004 	lsr.w	r0, r1, r4
 8000626:	4629      	mov	r1, r5
 8000628:	bd30      	pop	{r4, r5, pc}
 800062a:	f094 0f00 	teq	r4, #0
 800062e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000632:	bf06      	itte	eq
 8000634:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000638:	3401      	addeq	r4, #1
 800063a:	3d01      	subne	r5, #1
 800063c:	e74e      	b.n	80004dc <__adddf3+0x8c>
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf18      	it	ne
 8000644:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000648:	d029      	beq.n	800069e <__adddf3+0x24e>
 800064a:	ea94 0f05 	teq	r4, r5
 800064e:	bf08      	it	eq
 8000650:	ea90 0f02 	teqeq	r0, r2
 8000654:	d005      	beq.n	8000662 <__adddf3+0x212>
 8000656:	ea54 0c00 	orrs.w	ip, r4, r0
 800065a:	bf04      	itt	eq
 800065c:	4619      	moveq	r1, r3
 800065e:	4610      	moveq	r0, r2
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	ea91 0f03 	teq	r1, r3
 8000666:	bf1e      	ittt	ne
 8000668:	2100      	movne	r1, #0
 800066a:	2000      	movne	r0, #0
 800066c:	bd30      	popne	{r4, r5, pc}
 800066e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000672:	d105      	bne.n	8000680 <__adddf3+0x230>
 8000674:	0040      	lsls	r0, r0, #1
 8000676:	4149      	adcs	r1, r1
 8000678:	bf28      	it	cs
 800067a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800067e:	bd30      	pop	{r4, r5, pc}
 8000680:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000684:	bf3c      	itt	cc
 8000686:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800068a:	bd30      	popcc	{r4, r5, pc}
 800068c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000690:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000694:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000698:	f04f 0000 	mov.w	r0, #0
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006a2:	bf1a      	itte	ne
 80006a4:	4619      	movne	r1, r3
 80006a6:	4610      	movne	r0, r2
 80006a8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006ac:	bf1c      	itt	ne
 80006ae:	460b      	movne	r3, r1
 80006b0:	4602      	movne	r2, r0
 80006b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006b6:	bf06      	itte	eq
 80006b8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006bc:	ea91 0f03 	teqeq	r1, r3
 80006c0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	bf00      	nop

080006c8 <__aeabi_ui2d>:
 80006c8:	f090 0f00 	teq	r0, #0
 80006cc:	bf04      	itt	eq
 80006ce:	2100      	moveq	r1, #0
 80006d0:	4770      	bxeq	lr
 80006d2:	b530      	push	{r4, r5, lr}
 80006d4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006dc:	f04f 0500 	mov.w	r5, #0
 80006e0:	f04f 0100 	mov.w	r1, #0
 80006e4:	e750      	b.n	8000588 <__adddf3+0x138>
 80006e6:	bf00      	nop

080006e8 <__aeabi_i2d>:
 80006e8:	f090 0f00 	teq	r0, #0
 80006ec:	bf04      	itt	eq
 80006ee:	2100      	moveq	r1, #0
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006f8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006fc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000700:	bf48      	it	mi
 8000702:	4240      	negmi	r0, r0
 8000704:	f04f 0100 	mov.w	r1, #0
 8000708:	e73e      	b.n	8000588 <__adddf3+0x138>
 800070a:	bf00      	nop

0800070c <__aeabi_f2d>:
 800070c:	0042      	lsls	r2, r0, #1
 800070e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000712:	ea4f 0131 	mov.w	r1, r1, rrx
 8000716:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800071a:	bf1f      	itttt	ne
 800071c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000720:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000724:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000728:	4770      	bxne	lr
 800072a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800072e:	bf08      	it	eq
 8000730:	4770      	bxeq	lr
 8000732:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000736:	bf04      	itt	eq
 8000738:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800073c:	4770      	bxeq	lr
 800073e:	b530      	push	{r4, r5, lr}
 8000740:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000744:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000748:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800074c:	e71c      	b.n	8000588 <__adddf3+0x138>
 800074e:	bf00      	nop

08000750 <__aeabi_ul2d>:
 8000750:	ea50 0201 	orrs.w	r2, r0, r1
 8000754:	bf08      	it	eq
 8000756:	4770      	bxeq	lr
 8000758:	b530      	push	{r4, r5, lr}
 800075a:	f04f 0500 	mov.w	r5, #0
 800075e:	e00a      	b.n	8000776 <__aeabi_l2d+0x16>

08000760 <__aeabi_l2d>:
 8000760:	ea50 0201 	orrs.w	r2, r0, r1
 8000764:	bf08      	it	eq
 8000766:	4770      	bxeq	lr
 8000768:	b530      	push	{r4, r5, lr}
 800076a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800076e:	d502      	bpl.n	8000776 <__aeabi_l2d+0x16>
 8000770:	4240      	negs	r0, r0
 8000772:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000776:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000782:	f43f aed8 	beq.w	8000536 <__adddf3+0xe6>
 8000786:	f04f 0203 	mov.w	r2, #3
 800078a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800078e:	bf18      	it	ne
 8000790:	3203      	addne	r2, #3
 8000792:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000796:	bf18      	it	ne
 8000798:	3203      	addne	r2, #3
 800079a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800079e:	f1c2 0320 	rsb	r3, r2, #32
 80007a2:	fa00 fc03 	lsl.w	ip, r0, r3
 80007a6:	fa20 f002 	lsr.w	r0, r0, r2
 80007aa:	fa01 fe03 	lsl.w	lr, r1, r3
 80007ae:	ea40 000e 	orr.w	r0, r0, lr
 80007b2:	fa21 f102 	lsr.w	r1, r1, r2
 80007b6:	4414      	add	r4, r2
 80007b8:	e6bd      	b.n	8000536 <__adddf3+0xe6>
 80007ba:	bf00      	nop

080007bc <__aeabi_d2f>:
 80007bc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007c0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007c4:	bf24      	itt	cs
 80007c6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007ca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007ce:	d90d      	bls.n	80007ec <__aeabi_d2f+0x30>
 80007d0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007d4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80007d8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80007dc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80007e0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80007e4:	bf08      	it	eq
 80007e6:	f020 0001 	biceq.w	r0, r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007f0:	d121      	bne.n	8000836 <__aeabi_d2f+0x7a>
 80007f2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007f6:	bfbc      	itt	lt
 80007f8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007fc:	4770      	bxlt	lr
 80007fe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000802:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000806:	f1c2 0218 	rsb	r2, r2, #24
 800080a:	f1c2 0c20 	rsb	ip, r2, #32
 800080e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000812:	fa20 f002 	lsr.w	r0, r0, r2
 8000816:	bf18      	it	ne
 8000818:	f040 0001 	orrne.w	r0, r0, #1
 800081c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000820:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000824:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000828:	ea40 000c 	orr.w	r0, r0, ip
 800082c:	fa23 f302 	lsr.w	r3, r3, r2
 8000830:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000834:	e7cc      	b.n	80007d0 <__aeabi_d2f+0x14>
 8000836:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800083a:	d107      	bne.n	800084c <__aeabi_d2f+0x90>
 800083c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000840:	bf1e      	ittt	ne
 8000842:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000846:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800084a:	4770      	bxne	lr
 800084c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000850:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000854:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000858:	4770      	bx	lr
 800085a:	bf00      	nop

0800085c <__aeabi_uldivmod>:
 800085c:	b953      	cbnz	r3, 8000874 <__aeabi_uldivmod+0x18>
 800085e:	b94a      	cbnz	r2, 8000874 <__aeabi_uldivmod+0x18>
 8000860:	2900      	cmp	r1, #0
 8000862:	bf08      	it	eq
 8000864:	2800      	cmpeq	r0, #0
 8000866:	bf1c      	itt	ne
 8000868:	f04f 31ff 	movne.w	r1, #4294967295
 800086c:	f04f 30ff 	movne.w	r0, #4294967295
 8000870:	f000 b96e 	b.w	8000b50 <__aeabi_idiv0>
 8000874:	f1ad 0c08 	sub.w	ip, sp, #8
 8000878:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800087c:	f000 f806 	bl	800088c <__udivmoddi4>
 8000880:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000884:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000888:	b004      	add	sp, #16
 800088a:	4770      	bx	lr

0800088c <__udivmoddi4>:
 800088c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000890:	9d08      	ldr	r5, [sp, #32]
 8000892:	4604      	mov	r4, r0
 8000894:	468c      	mov	ip, r1
 8000896:	2b00      	cmp	r3, #0
 8000898:	f040 8083 	bne.w	80009a2 <__udivmoddi4+0x116>
 800089c:	428a      	cmp	r2, r1
 800089e:	4617      	mov	r7, r2
 80008a0:	d947      	bls.n	8000932 <__udivmoddi4+0xa6>
 80008a2:	fab2 f282 	clz	r2, r2
 80008a6:	b142      	cbz	r2, 80008ba <__udivmoddi4+0x2e>
 80008a8:	f1c2 0020 	rsb	r0, r2, #32
 80008ac:	fa24 f000 	lsr.w	r0, r4, r0
 80008b0:	4091      	lsls	r1, r2
 80008b2:	4097      	lsls	r7, r2
 80008b4:	ea40 0c01 	orr.w	ip, r0, r1
 80008b8:	4094      	lsls	r4, r2
 80008ba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80008be:	0c23      	lsrs	r3, r4, #16
 80008c0:	fbbc f6f8 	udiv	r6, ip, r8
 80008c4:	fa1f fe87 	uxth.w	lr, r7
 80008c8:	fb08 c116 	mls	r1, r8, r6, ip
 80008cc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80008d0:	fb06 f10e 	mul.w	r1, r6, lr
 80008d4:	4299      	cmp	r1, r3
 80008d6:	d909      	bls.n	80008ec <__udivmoddi4+0x60>
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	f106 30ff 	add.w	r0, r6, #4294967295
 80008de:	f080 8119 	bcs.w	8000b14 <__udivmoddi4+0x288>
 80008e2:	4299      	cmp	r1, r3
 80008e4:	f240 8116 	bls.w	8000b14 <__udivmoddi4+0x288>
 80008e8:	3e02      	subs	r6, #2
 80008ea:	443b      	add	r3, r7
 80008ec:	1a5b      	subs	r3, r3, r1
 80008ee:	b2a4      	uxth	r4, r4
 80008f0:	fbb3 f0f8 	udiv	r0, r3, r8
 80008f4:	fb08 3310 	mls	r3, r8, r0, r3
 80008f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008fc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000900:	45a6      	cmp	lr, r4
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x8c>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f100 33ff 	add.w	r3, r0, #4294967295
 800090a:	f080 8105 	bcs.w	8000b18 <__udivmoddi4+0x28c>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f240 8102 	bls.w	8000b18 <__udivmoddi4+0x28c>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800091c:	eba4 040e 	sub.w	r4, r4, lr
 8000920:	2600      	movs	r6, #0
 8000922:	b11d      	cbz	r5, 800092c <__udivmoddi4+0xa0>
 8000924:	40d4      	lsrs	r4, r2
 8000926:	2300      	movs	r3, #0
 8000928:	e9c5 4300 	strd	r4, r3, [r5]
 800092c:	4631      	mov	r1, r6
 800092e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000932:	b902      	cbnz	r2, 8000936 <__udivmoddi4+0xaa>
 8000934:	deff      	udf	#255	; 0xff
 8000936:	fab2 f282 	clz	r2, r2
 800093a:	2a00      	cmp	r2, #0
 800093c:	d150      	bne.n	80009e0 <__udivmoddi4+0x154>
 800093e:	1bcb      	subs	r3, r1, r7
 8000940:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000944:	fa1f f887 	uxth.w	r8, r7
 8000948:	2601      	movs	r6, #1
 800094a:	fbb3 fcfe 	udiv	ip, r3, lr
 800094e:	0c21      	lsrs	r1, r4, #16
 8000950:	fb0e 331c 	mls	r3, lr, ip, r3
 8000954:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000958:	fb08 f30c 	mul.w	r3, r8, ip
 800095c:	428b      	cmp	r3, r1
 800095e:	d907      	bls.n	8000970 <__udivmoddi4+0xe4>
 8000960:	1879      	adds	r1, r7, r1
 8000962:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000966:	d202      	bcs.n	800096e <__udivmoddi4+0xe2>
 8000968:	428b      	cmp	r3, r1
 800096a:	f200 80e9 	bhi.w	8000b40 <__udivmoddi4+0x2b4>
 800096e:	4684      	mov	ip, r0
 8000970:	1ac9      	subs	r1, r1, r3
 8000972:	b2a3      	uxth	r3, r4
 8000974:	fbb1 f0fe 	udiv	r0, r1, lr
 8000978:	fb0e 1110 	mls	r1, lr, r0, r1
 800097c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000980:	fb08 f800 	mul.w	r8, r8, r0
 8000984:	45a0      	cmp	r8, r4
 8000986:	d907      	bls.n	8000998 <__udivmoddi4+0x10c>
 8000988:	193c      	adds	r4, r7, r4
 800098a:	f100 33ff 	add.w	r3, r0, #4294967295
 800098e:	d202      	bcs.n	8000996 <__udivmoddi4+0x10a>
 8000990:	45a0      	cmp	r8, r4
 8000992:	f200 80d9 	bhi.w	8000b48 <__udivmoddi4+0x2bc>
 8000996:	4618      	mov	r0, r3
 8000998:	eba4 0408 	sub.w	r4, r4, r8
 800099c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80009a0:	e7bf      	b.n	8000922 <__udivmoddi4+0x96>
 80009a2:	428b      	cmp	r3, r1
 80009a4:	d909      	bls.n	80009ba <__udivmoddi4+0x12e>
 80009a6:	2d00      	cmp	r5, #0
 80009a8:	f000 80b1 	beq.w	8000b0e <__udivmoddi4+0x282>
 80009ac:	2600      	movs	r6, #0
 80009ae:	e9c5 0100 	strd	r0, r1, [r5]
 80009b2:	4630      	mov	r0, r6
 80009b4:	4631      	mov	r1, r6
 80009b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ba:	fab3 f683 	clz	r6, r3
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d14a      	bne.n	8000a58 <__udivmoddi4+0x1cc>
 80009c2:	428b      	cmp	r3, r1
 80009c4:	d302      	bcc.n	80009cc <__udivmoddi4+0x140>
 80009c6:	4282      	cmp	r2, r0
 80009c8:	f200 80b8 	bhi.w	8000b3c <__udivmoddi4+0x2b0>
 80009cc:	1a84      	subs	r4, r0, r2
 80009ce:	eb61 0103 	sbc.w	r1, r1, r3
 80009d2:	2001      	movs	r0, #1
 80009d4:	468c      	mov	ip, r1
 80009d6:	2d00      	cmp	r5, #0
 80009d8:	d0a8      	beq.n	800092c <__udivmoddi4+0xa0>
 80009da:	e9c5 4c00 	strd	r4, ip, [r5]
 80009de:	e7a5      	b.n	800092c <__udivmoddi4+0xa0>
 80009e0:	f1c2 0320 	rsb	r3, r2, #32
 80009e4:	fa20 f603 	lsr.w	r6, r0, r3
 80009e8:	4097      	lsls	r7, r2
 80009ea:	fa01 f002 	lsl.w	r0, r1, r2
 80009ee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f2:	40d9      	lsrs	r1, r3
 80009f4:	4330      	orrs	r0, r6
 80009f6:	0c03      	lsrs	r3, r0, #16
 80009f8:	fbb1 f6fe 	udiv	r6, r1, lr
 80009fc:	fa1f f887 	uxth.w	r8, r7
 8000a00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000a04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a08:	fb06 f108 	mul.w	r1, r6, r8
 8000a0c:	4299      	cmp	r1, r3
 8000a0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000a12:	d909      	bls.n	8000a28 <__udivmoddi4+0x19c>
 8000a14:	18fb      	adds	r3, r7, r3
 8000a16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000a1a:	f080 808d 	bcs.w	8000b38 <__udivmoddi4+0x2ac>
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	f240 808a 	bls.w	8000b38 <__udivmoddi4+0x2ac>
 8000a24:	3e02      	subs	r6, #2
 8000a26:	443b      	add	r3, r7
 8000a28:	1a5b      	subs	r3, r3, r1
 8000a2a:	b281      	uxth	r1, r0
 8000a2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a38:	fb00 f308 	mul.w	r3, r0, r8
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d907      	bls.n	8000a50 <__udivmoddi4+0x1c4>
 8000a40:	1879      	adds	r1, r7, r1
 8000a42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000a46:	d273      	bcs.n	8000b30 <__udivmoddi4+0x2a4>
 8000a48:	428b      	cmp	r3, r1
 8000a4a:	d971      	bls.n	8000b30 <__udivmoddi4+0x2a4>
 8000a4c:	3802      	subs	r0, #2
 8000a4e:	4439      	add	r1, r7
 8000a50:	1acb      	subs	r3, r1, r3
 8000a52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000a56:	e778      	b.n	800094a <__udivmoddi4+0xbe>
 8000a58:	f1c6 0c20 	rsb	ip, r6, #32
 8000a5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000a60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000a64:	431c      	orrs	r4, r3
 8000a66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000a6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000a6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000a72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000a76:	431f      	orrs	r7, r3
 8000a78:	0c3b      	lsrs	r3, r7, #16
 8000a7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a7e:	fa1f f884 	uxth.w	r8, r4
 8000a82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000a8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000a8e:	458a      	cmp	sl, r1
 8000a90:	fa02 f206 	lsl.w	r2, r2, r6
 8000a94:	fa00 f306 	lsl.w	r3, r0, r6
 8000a98:	d908      	bls.n	8000aac <__udivmoddi4+0x220>
 8000a9a:	1861      	adds	r1, r4, r1
 8000a9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000aa0:	d248      	bcs.n	8000b34 <__udivmoddi4+0x2a8>
 8000aa2:	458a      	cmp	sl, r1
 8000aa4:	d946      	bls.n	8000b34 <__udivmoddi4+0x2a8>
 8000aa6:	f1a9 0902 	sub.w	r9, r9, #2
 8000aaa:	4421      	add	r1, r4
 8000aac:	eba1 010a 	sub.w	r1, r1, sl
 8000ab0:	b2bf      	uxth	r7, r7
 8000ab2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000aba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000abe:	fb00 f808 	mul.w	r8, r0, r8
 8000ac2:	45b8      	cmp	r8, r7
 8000ac4:	d907      	bls.n	8000ad6 <__udivmoddi4+0x24a>
 8000ac6:	19e7      	adds	r7, r4, r7
 8000ac8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000acc:	d22e      	bcs.n	8000b2c <__udivmoddi4+0x2a0>
 8000ace:	45b8      	cmp	r8, r7
 8000ad0:	d92c      	bls.n	8000b2c <__udivmoddi4+0x2a0>
 8000ad2:	3802      	subs	r0, #2
 8000ad4:	4427      	add	r7, r4
 8000ad6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ada:	eba7 0708 	sub.w	r7, r7, r8
 8000ade:	fba0 8902 	umull	r8, r9, r0, r2
 8000ae2:	454f      	cmp	r7, r9
 8000ae4:	46c6      	mov	lr, r8
 8000ae6:	4649      	mov	r1, r9
 8000ae8:	d31a      	bcc.n	8000b20 <__udivmoddi4+0x294>
 8000aea:	d017      	beq.n	8000b1c <__udivmoddi4+0x290>
 8000aec:	b15d      	cbz	r5, 8000b06 <__udivmoddi4+0x27a>
 8000aee:	ebb3 020e 	subs.w	r2, r3, lr
 8000af2:	eb67 0701 	sbc.w	r7, r7, r1
 8000af6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000afa:	40f2      	lsrs	r2, r6
 8000afc:	ea4c 0202 	orr.w	r2, ip, r2
 8000b00:	40f7      	lsrs	r7, r6
 8000b02:	e9c5 2700 	strd	r2, r7, [r5]
 8000b06:	2600      	movs	r6, #0
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	462e      	mov	r6, r5
 8000b10:	4628      	mov	r0, r5
 8000b12:	e70b      	b.n	800092c <__udivmoddi4+0xa0>
 8000b14:	4606      	mov	r6, r0
 8000b16:	e6e9      	b.n	80008ec <__udivmoddi4+0x60>
 8000b18:	4618      	mov	r0, r3
 8000b1a:	e6fd      	b.n	8000918 <__udivmoddi4+0x8c>
 8000b1c:	4543      	cmp	r3, r8
 8000b1e:	d2e5      	bcs.n	8000aec <__udivmoddi4+0x260>
 8000b20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000b24:	eb69 0104 	sbc.w	r1, r9, r4
 8000b28:	3801      	subs	r0, #1
 8000b2a:	e7df      	b.n	8000aec <__udivmoddi4+0x260>
 8000b2c:	4608      	mov	r0, r1
 8000b2e:	e7d2      	b.n	8000ad6 <__udivmoddi4+0x24a>
 8000b30:	4660      	mov	r0, ip
 8000b32:	e78d      	b.n	8000a50 <__udivmoddi4+0x1c4>
 8000b34:	4681      	mov	r9, r0
 8000b36:	e7b9      	b.n	8000aac <__udivmoddi4+0x220>
 8000b38:	4666      	mov	r6, ip
 8000b3a:	e775      	b.n	8000a28 <__udivmoddi4+0x19c>
 8000b3c:	4630      	mov	r0, r6
 8000b3e:	e74a      	b.n	80009d6 <__udivmoddi4+0x14a>
 8000b40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b44:	4439      	add	r1, r7
 8000b46:	e713      	b.n	8000970 <__udivmoddi4+0xe4>
 8000b48:	3802      	subs	r0, #2
 8000b4a:	443c      	add	r4, r7
 8000b4c:	e724      	b.n	8000998 <__udivmoddi4+0x10c>
 8000b4e:	bf00      	nop

08000b50 <__aeabi_idiv0>:
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_DMA_Init+0x3c>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2100      	movs	r1, #0
 8000b7a:	200c      	movs	r0, #12
 8000b7c:	f000 fded 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000b80:	200c      	movs	r0, #12
 8000b82:	f000 fe06 	bl	8001792 <HAL_NVIC_EnableIRQ>

}
 8000b86:	bf00      	nop
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40023800 	.word	0x40023800

08000b94 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9a:	f107 031c 	add.w	r3, r7, #28
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	601a      	str	r2, [r3, #0]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	609a      	str	r2, [r3, #8]
 8000ba6:	60da      	str	r2, [r3, #12]
 8000ba8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	61bb      	str	r3, [r7, #24]
 8000bae:	4b80      	ldr	r3, [pc, #512]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	4a7f      	ldr	r2, [pc, #508]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bb4:	f043 0304 	orr.w	r3, r3, #4
 8000bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bba:	4b7d      	ldr	r3, [pc, #500]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	61bb      	str	r3, [r7, #24]
 8000bc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
 8000bca:	4b79      	ldr	r3, [pc, #484]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	4a78      	ldr	r2, [pc, #480]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd6:	4b76      	ldr	r3, [pc, #472]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bde:	617b      	str	r3, [r7, #20]
 8000be0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
 8000be6:	4b72      	ldr	r3, [pc, #456]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	4a71      	ldr	r2, [pc, #452]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bec:	f043 0301 	orr.w	r3, r3, #1
 8000bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf2:	4b6f      	ldr	r3, [pc, #444]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	f003 0301 	and.w	r3, r3, #1
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60fb      	str	r3, [r7, #12]
 8000c02:	4b6b      	ldr	r3, [pc, #428]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a6a      	ldr	r2, [pc, #424]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b68      	ldr	r3, [pc, #416]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	60fb      	str	r3, [r7, #12]
 8000c18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	60bb      	str	r3, [r7, #8]
 8000c1e:	4b64      	ldr	r3, [pc, #400]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c22:	4a63      	ldr	r2, [pc, #396]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c24:	f043 0308 	orr.w	r3, r3, #8
 8000c28:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2a:	4b61      	ldr	r3, [pc, #388]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	f003 0308 	and.w	r3, r3, #8
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4b5d      	ldr	r3, [pc, #372]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	4a5c      	ldr	r2, [pc, #368]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c44:	6313      	str	r3, [r2, #48]	; 0x30
 8000c46:	4b5a      	ldr	r3, [pc, #360]	; (8000db0 <MX_GPIO_Init+0x21c>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4e:	607b      	str	r3, [r7, #4]
 8000c50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c58:	4856      	ldr	r0, [pc, #344]	; (8000db4 <MX_GPIO_Init+0x220>)
 8000c5a:	f001 fb63 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2140      	movs	r1, #64	; 0x40
 8000c62:	4855      	ldr	r0, [pc, #340]	; (8000db8 <MX_GPIO_Init+0x224>)
 8000c64:	f001 fb5e 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	484f      	ldr	r0, [pc, #316]	; (8000dbc <MX_GPIO_Init+0x228>)
 8000c80:	f001 f9a4 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c84:	2332      	movs	r3, #50	; 0x32
 8000c86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c88:	2302      	movs	r3, #2
 8000c8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c90:	2303      	movs	r3, #3
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c94:	230b      	movs	r3, #11
 8000c96:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c98:	f107 031c 	add.w	r3, r7, #28
 8000c9c:	4619      	mov	r1, r3
 8000c9e:	4847      	ldr	r0, [pc, #284]	; (8000dbc <MX_GPIO_Init+0x228>)
 8000ca0:	f001 f994 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000ca4:	2386      	movs	r3, #134	; 0x86
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca8:	2302      	movs	r3, #2
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cb4:	230b      	movs	r3, #11
 8000cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 031c 	add.w	r3, r7, #28
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4840      	ldr	r0, [pc, #256]	; (8000dc0 <MX_GPIO_Init+0x22c>)
 8000cc0:	f001 f984 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000cc4:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	f107 031c 	add.w	r3, r7, #28
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4835      	ldr	r0, [pc, #212]	; (8000db4 <MX_GPIO_Init+0x220>)
 8000cde:	f001 f975 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000ce2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000cf4:	230b      	movs	r3, #11
 8000cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	482d      	ldr	r0, [pc, #180]	; (8000db4 <MX_GPIO_Init+0x220>)
 8000d00:	f001 f964 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d04:	2340      	movs	r3, #64	; 0x40
 8000d06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d14:	f107 031c 	add.w	r3, r7, #28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4827      	ldr	r0, [pc, #156]	; (8000db8 <MX_GPIO_Init+0x224>)
 8000d1c:	f001 f956 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d20:	2380      	movs	r3, #128	; 0x80
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d2c:	f107 031c 	add.w	r3, r7, #28
 8000d30:	4619      	mov	r1, r3
 8000d32:	4821      	ldr	r0, [pc, #132]	; (8000db8 <MX_GPIO_Init+0x224>)
 8000d34:	f001 f94a 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d38:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	2302      	movs	r3, #2
 8000d40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d46:	2303      	movs	r3, #3
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d4a:	230a      	movs	r3, #10
 8000d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	481a      	ldr	r0, [pc, #104]	; (8000dc0 <MX_GPIO_Init+0x22c>)
 8000d56:	f001 f939 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <MX_GPIO_Init+0x22c>)
 8000d70:	f001 f92c 	bl	8001fcc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000d74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d86:	230b      	movs	r3, #11
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d8a:	f107 031c 	add.w	r3, r7, #28
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4809      	ldr	r0, [pc, #36]	; (8000db8 <MX_GPIO_Init+0x224>)
 8000d92:	f001 f91b 	bl	8001fcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	2028      	movs	r0, #40	; 0x28
 8000d9c:	f000 fcdd 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da0:	2028      	movs	r0, #40	; 0x28
 8000da2:	f000 fcf6 	bl	8001792 <HAL_NVIC_EnableIRQ>

}
 8000da6:	bf00      	nop
 8000da8:	3730      	adds	r7, #48	; 0x30
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400
 8000db8:	40021800 	.word	0x40021800
 8000dbc:	40020800 	.word	0x40020800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fb53 	bl	8001478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f94f 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f7ff fedd 	bl	8000b94 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dda:	f7ff febb 	bl	8000b54 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000dde:	f000 fa75 	bl	80012cc <MX_USART3_UART_Init>

  /* USER CODE BEGIN 2 */
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);
 8000de2:	4b99      	ldr	r3, [pc, #612]	; (8001048 <main+0x280>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68da      	ldr	r2, [r3, #12]
 8000de8:	4b97      	ldr	r3, [pc, #604]	; (8001048 <main+0x280>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f042 0210 	orr.w	r2, r2, #16
 8000df0:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_DMA(&huart3, Receive_buff, Buff_Size-1);
 8000df2:	22ff      	movs	r2, #255	; 0xff
 8000df4:	4995      	ldr	r1, [pc, #596]	; (800104c <main+0x284>)
 8000df6:	4894      	ldr	r0, [pc, #592]	; (8001048 <main+0x280>)
 8000df8:	f002 f825 	bl	8002e46 <HAL_UART_Receive_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		if (UART_Message)
 8000dfc:	4b94      	ldr	r3, [pc, #592]	; (8001050 <main+0x288>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 8085 	beq.w	8000f10 <main+0x148>
		{
			uint8_t str_len = Buff_Size - __HAL_DMA_GET_COUNTER(&hdma_usart3_rx);
 8000e06:	4b93      	ldr	r3, [pc, #588]	; (8001054 <main+0x28c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	425b      	negs	r3, r3
 8000e10:	71fb      	strb	r3, [r7, #7]
			HAL_UART_Receive_DMA(&huart3, Receive_buff, Buff_Size - 1);
 8000e12:	22ff      	movs	r2, #255	; 0xff
 8000e14:	498d      	ldr	r1, [pc, #564]	; (800104c <main+0x284>)
 8000e16:	488c      	ldr	r0, [pc, #560]	; (8001048 <main+0x280>)
 8000e18:	f002 f815 	bl	8002e46 <HAL_UART_Receive_DMA>
			memset(Receive_buff+str_len-1, 0, Buff_Size-str_len);
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	3b01      	subs	r3, #1
 8000e20:	4a8a      	ldr	r2, [pc, #552]	; (800104c <main+0x284>)
 8000e22:	1898      	adds	r0, r3, r2
 8000e24:	79fb      	ldrb	r3, [r7, #7]
 8000e26:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	f003 f929 	bl	8004084 <memset>
			UART_Message = 0;
 8000e32:	4b87      	ldr	r3, [pc, #540]	; (8001050 <main+0x288>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	701a      	strb	r2, [r3, #0]
			if ((Receive_buff[0] == 'f' || Receive_buff[0] == 'F') && Receive_buff[1] == '=' && (Receive_buff[2] >= '0' || Receive_buff[2] <= '9')
 8000e38:	4b84      	ldr	r3, [pc, #528]	; (800104c <main+0x284>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b66      	cmp	r3, #102	; 0x66
 8000e3e:	d003      	beq.n	8000e48 <main+0x80>
 8000e40:	4b82      	ldr	r3, [pc, #520]	; (800104c <main+0x284>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b46      	cmp	r3, #70	; 0x46
 8000e46:	d15c      	bne.n	8000f02 <main+0x13a>
 8000e48:	4b80      	ldr	r3, [pc, #512]	; (800104c <main+0x284>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	2b3d      	cmp	r3, #61	; 0x3d
 8000e4e:	d158      	bne.n	8000f02 <main+0x13a>
 8000e50:	4b7e      	ldr	r3, [pc, #504]	; (800104c <main+0x284>)
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	2b2f      	cmp	r3, #47	; 0x2f
 8000e56:	d803      	bhi.n	8000e60 <main+0x98>
 8000e58:	4b7c      	ldr	r3, [pc, #496]	; (800104c <main+0x284>)
 8000e5a:	789b      	ldrb	r3, [r3, #2]
 8000e5c:	2b39      	cmp	r3, #57	; 0x39
 8000e5e:	d850      	bhi.n	8000f02 <main+0x13a>
					&& Receive_buff[3] == '.' && (Receive_buff[4] >= '0' || Receive_buff[4] <= '9') && !(Receive_buff[2] == '0' && Receive_buff[4] == '0') && Receive_buff[5] == 0)
 8000e60:	4b7a      	ldr	r3, [pc, #488]	; (800104c <main+0x284>)
 8000e62:	78db      	ldrb	r3, [r3, #3]
 8000e64:	2b2e      	cmp	r3, #46	; 0x2e
 8000e66:	d14c      	bne.n	8000f02 <main+0x13a>
 8000e68:	4b78      	ldr	r3, [pc, #480]	; (800104c <main+0x284>)
 8000e6a:	791b      	ldrb	r3, [r3, #4]
 8000e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8000e6e:	d803      	bhi.n	8000e78 <main+0xb0>
 8000e70:	4b76      	ldr	r3, [pc, #472]	; (800104c <main+0x284>)
 8000e72:	791b      	ldrb	r3, [r3, #4]
 8000e74:	2b39      	cmp	r3, #57	; 0x39
 8000e76:	d844      	bhi.n	8000f02 <main+0x13a>
 8000e78:	4b74      	ldr	r3, [pc, #464]	; (800104c <main+0x284>)
 8000e7a:	789b      	ldrb	r3, [r3, #2]
 8000e7c:	2b30      	cmp	r3, #48	; 0x30
 8000e7e:	d103      	bne.n	8000e88 <main+0xc0>
 8000e80:	4b72      	ldr	r3, [pc, #456]	; (800104c <main+0x284>)
 8000e82:	791b      	ldrb	r3, [r3, #4]
 8000e84:	2b30      	cmp	r3, #48	; 0x30
 8000e86:	d03c      	beq.n	8000f02 <main+0x13a>
 8000e88:	4b70      	ldr	r3, [pc, #448]	; (800104c <main+0x284>)
 8000e8a:	795b      	ldrb	r3, [r3, #5]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d138      	bne.n	8000f02 <main+0x13a>
			{
				blinking_frequency = (Receive_buff[2]-0x30) + ((float)Receive_buff[4]-0x30) * 0.1;
 8000e90:	4b6e      	ldr	r3, [pc, #440]	; (800104c <main+0x284>)
 8000e92:	789b      	ldrb	r3, [r3, #2]
 8000e94:	3b30      	subs	r3, #48	; 0x30
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc26 	bl	80006e8 <__aeabi_i2d>
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	460d      	mov	r5, r1
 8000ea0:	4b6a      	ldr	r3, [pc, #424]	; (800104c <main+0x284>)
 8000ea2:	791b      	ldrb	r3, [r3, #4]
 8000ea4:	ee07 3a90 	vmov	s15, r3
 8000ea8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000eac:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8001058 <main+0x290>
 8000eb0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000eb4:	ee17 0a90 	vmov	r0, s15
 8000eb8:	f7ff fc28 	bl	800070c <__aeabi_f2d>
 8000ebc:	a360      	add	r3, pc, #384	; (adr r3, 8001040 <main+0x278>)
 8000ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ec2:	f7ff f995 	bl	80001f0 <__aeabi_dmul>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	460b      	mov	r3, r1
 8000eca:	4620      	mov	r0, r4
 8000ecc:	4629      	mov	r1, r5
 8000ece:	f7ff fabf 	bl	8000450 <__adddf3>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4610      	mov	r0, r2
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f7ff fc6f 	bl	80007bc <__aeabi_d2f>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4a5e      	ldr	r2, [pc, #376]	; (800105c <main+0x294>)
 8000ee2:	6013      	str	r3, [r2, #0]
				blinking_period = 1 / blinking_frequency * 1000;
 8000ee4:	4b5d      	ldr	r3, [pc, #372]	; (800105c <main+0x294>)
 8000ee6:	ed93 7a00 	vldr	s14, [r3]
 8000eea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000eee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ef2:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8001060 <main+0x298>
 8000ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efa:	4b5a      	ldr	r3, [pc, #360]	; (8001064 <main+0x29c>)
 8000efc:	edc3 7a00 	vstr	s15, [r3]
 8000f00:	e006      	b.n	8000f10 <main+0x148>
			}
			else
			{
				HAL_UART_Transmit(&huart3, (uint8_t*)"Wrong command", strlen("Wrong command"), 0xFFFFFFFF);
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	220d      	movs	r2, #13
 8000f08:	4957      	ldr	r1, [pc, #348]	; (8001068 <main+0x2a0>)
 8000f0a:	484f      	ldr	r0, [pc, #316]	; (8001048 <main+0x280>)
 8000f0c:	f001 ff09 	bl	8002d22 <HAL_UART_Transmit>
			}
		}
		if (flashingMode)
 8000f10:	4b56      	ldr	r3, [pc, #344]	; (800106c <main+0x2a4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d030      	beq.n	8000f7a <main+0x1b2>
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2180      	movs	r1, #128	; 0x80
 8000f1c:	4854      	ldr	r0, [pc, #336]	; (8001070 <main+0x2a8>)
 8000f1e:	f001 fa01 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f28:	4851      	ldr	r0, [pc, #324]	; (8001070 <main+0x2a8>)
 8000f2a:	f001 f9fb 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 2);
 8000f2e:	4b4d      	ldr	r3, [pc, #308]	; (8001064 <main+0x29c>)
 8000f30:	ed93 7a00 	vldr	s14, [r3]
 8000f34:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f40:	ee17 0a90 	vmov	r0, s15
 8000f44:	f000 fb0a 	bl	800155c <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	2180      	movs	r1, #128	; 0x80
 8000f4c:	4848      	ldr	r0, [pc, #288]	; (8001070 <main+0x2a8>)
 8000f4e:	f001 f9e9 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000f52:	2201      	movs	r2, #1
 8000f54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f58:	4845      	ldr	r0, [pc, #276]	; (8001070 <main+0x2a8>)
 8000f5a:	f001 f9e3 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 2);
 8000f5e:	4b41      	ldr	r3, [pc, #260]	; (8001064 <main+0x29c>)
 8000f60:	ed93 7a00 	vldr	s14, [r3]
 8000f64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f70:	ee17 0a90 	vmov	r0, s15
 8000f74:	f000 faf2 	bl	800155c <HAL_Delay>
 8000f78:	e740      	b.n	8000dfc <main+0x34>
		}
		else
		{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	483c      	ldr	r0, [pc, #240]	; (8001070 <main+0x2a8>)
 8000f80:	f001 f9d0 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f84:	2200      	movs	r2, #0
 8000f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f8a:	4839      	ldr	r0, [pc, #228]	; (8001070 <main+0x2a8>)
 8000f8c:	f001 f9ca 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 4);
 8000f90:	4b34      	ldr	r3, [pc, #208]	; (8001064 <main+0x29c>)
 8000f92:	ed93 7a00 	vldr	s14, [r3]
 8000f96:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000f9a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa2:	ee17 0a90 	vmov	r0, s15
 8000fa6:	f000 fad9 	bl	800155c <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000faa:	2201      	movs	r2, #1
 8000fac:	2180      	movs	r1, #128	; 0x80
 8000fae:	4830      	ldr	r0, [pc, #192]	; (8001070 <main+0x2a8>)
 8000fb0:	f001 f9b8 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fba:	482d      	ldr	r0, [pc, #180]	; (8001070 <main+0x2a8>)
 8000fbc:	f001 f9b2 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 4);
 8000fc0:	4b28      	ldr	r3, [pc, #160]	; (8001064 <main+0x29c>)
 8000fc2:	ed93 7a00 	vldr	s14, [r3]
 8000fc6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000fca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000fce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fd2:	ee17 0a90 	vmov	r0, s15
 8000fd6:	f000 fac1 	bl	800155c <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2180      	movs	r1, #128	; 0x80
 8000fde:	4824      	ldr	r0, [pc, #144]	; (8001070 <main+0x2a8>)
 8000fe0:	f001 f9a0 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0x2a8>)
 8000fec:	f001 f99a 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 4);
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <main+0x29c>)
 8000ff2:	ed93 7a00 	vldr	s14, [r3]
 8000ff6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000ffa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ffe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001002:	ee17 0a90 	vmov	r0, s15
 8001006:	f000 faa9 	bl	800155c <HAL_Delay>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800100a:	2200      	movs	r2, #0
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	4818      	ldr	r0, [pc, #96]	; (8001070 <main+0x2a8>)
 8001010:	f001 f988 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800101a:	4815      	ldr	r0, [pc, #84]	; (8001070 <main+0x2a8>)
 800101c:	f001 f982 	bl	8002324 <HAL_GPIO_WritePin>
			HAL_Delay(blinking_period / 4);
 8001020:	4b10      	ldr	r3, [pc, #64]	; (8001064 <main+0x29c>)
 8001022:	ed93 7a00 	vldr	s14, [r3]
 8001026:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 800102a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800102e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001032:	ee17 0a90 	vmov	r0, s15
 8001036:	f000 fa91 	bl	800155c <HAL_Delay>
		if (UART_Message)
 800103a:	e6df      	b.n	8000dfc <main+0x34>
 800103c:	f3af 8000 	nop.w
 8001040:	9999999a 	.word	0x9999999a
 8001044:	3fb99999 	.word	0x3fb99999
 8001048:	20000194 	.word	0x20000194
 800104c:	20000034 	.word	0x20000034
 8001050:	20000031 	.word	0x20000031
 8001054:	20000134 	.word	0x20000134
 8001058:	42400000 	.word	0x42400000
 800105c:	20000000 	.word	0x20000000
 8001060:	447a0000 	.word	0x447a0000
 8001064:	20000004 	.word	0x20000004
 8001068:	080040ac 	.word	0x080040ac
 800106c:	20000030 	.word	0x20000030
 8001070:	40020400 	.word	0x40020400

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f002 fffe 	bl	8004084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b28      	ldr	r3, [pc, #160]	; (8001140 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a27      	ldr	r2, [pc, #156]	; (8001140 <SystemClock_Config+0xcc>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b25      	ldr	r3, [pc, #148]	; (8001140 <SystemClock_Config+0xcc>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a21      	ldr	r2, [pc, #132]	; (8001144 <SystemClock_Config+0xd0>)
 80010be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c2:	6013      	str	r3, [r2, #0]
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <SystemClock_Config+0xd0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010cc:	607b      	str	r3, [r7, #4]
 80010ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d0:	2301      	movs	r3, #1
 80010d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80010d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010da:	2302      	movs	r3, #2
 80010dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010e8:	23a8      	movs	r3, #168	; 0xa8
 80010ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010ec:	2302      	movs	r3, #2
 80010ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f0:	2307      	movs	r3, #7
 80010f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010f4:	f107 0320 	add.w	r3, r7, #32
 80010f8:	4618      	mov	r0, r3
 80010fa:	f001 f951 	bl	80023a0 <HAL_RCC_OscConfig>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001104:	f000 f84e 	bl	80011a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001108:	230f      	movs	r3, #15
 800110a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800110c:	2302      	movs	r3, #2
 800110e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001114:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001118:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001120:	f107 030c 	add.w	r3, r7, #12
 8001124:	2105      	movs	r1, #5
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fbb2 	bl	8002890 <HAL_RCC_ClockConfig>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001132:	f000 f837 	bl	80011a4 <Error_Handler>
  }
}
 8001136:	bf00      	nop
 8001138:	3750      	adds	r7, #80	; 0x50
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40007000 	.word	0x40007000

08001148 <UART_IRQHandler>:

/* USER CODE BEGIN 4 */
void UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
		if(RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0310 	and.w	r3, r3, #16
 800115a:	2b10      	cmp	r3, #16
 800115c:	d10d      	bne.n	800117a <UART_IRQHandler+0x32>
		{
			__HAL_UART_CLEAR_IDLEFLAG(huart);
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	68fb      	ldr	r3, [r7, #12]
			UART_IDLECallback(huart);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f805 	bl	8001184 <UART_IDLECallback>
		}
}
 800117a:	bf00      	nop
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
	...

08001184 <UART_IDLECallback>:

void UART_IDLECallback(UART_HandleTypeDef *huart)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(huart);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f001 fe8a 	bl	8002ea6 <HAL_UART_DMAStop>
	UART_Message = 1;
 8001192:	4b03      	ldr	r3, [pc, #12]	; (80011a0 <UART_IDLECallback+0x1c>)
 8001194:	2201      	movs	r2, #1
 8001196:	701a      	strb	r2, [r3, #0]
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000031 	.word	0x20000031

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011ac:	e7fe      	b.n	80011ac <Error_Handler+0x8>
	...

080011b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
 80011ba:	4b10      	ldr	r3, [pc, #64]	; (80011fc <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	4a0f      	ldr	r2, [pc, #60]	; (80011fc <HAL_MspInit+0x4c>)
 80011c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c4:	6453      	str	r3, [r2, #68]	; 0x44
 80011c6:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_MspInit+0x4c>)
 80011c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ce:	607b      	str	r3, [r7, #4]
 80011d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x4c>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6413      	str	r3, [r2, #64]	; 0x40
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x4c>)
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 f966 	bl	800151c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <DMA1_Stream1_IRQHandler+0x10>)
 800125a:	f000 fc4d 	bl	8001af8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000134 	.word	0x20000134

08001268 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <USART3_IRQHandler+0x14>)
 800126e:	f001 fe99 	bl	8002fa4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  UART_IRQHandler(&huart3);
 8001272:	4802      	ldr	r0, [pc, #8]	; (800127c <USART3_IRQHandler+0x14>)
 8001274:	f7ff ff68 	bl	8001148 <UART_IRQHandler>
  /* USER CODE END USART3_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20000194 	.word	0x20000194

08001280 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	flashingMode = !flashingMode;
 8001284:	4b07      	ldr	r3, [pc, #28]	; (80012a4 <EXTI15_10_IRQHandler+0x24>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf0c      	ite	eq
 800128c:	2301      	moveq	r3, #1
 800128e:	2300      	movne	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	4b03      	ldr	r3, [pc, #12]	; (80012a4 <EXTI15_10_IRQHandler+0x24>)
 8001296:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001298:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800129c:	f001 f85c 	bl	8002358 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80012a0:	bf00      	nop
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	20000030 	.word	0x20000030

080012a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012ac:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <SystemInit+0x20>)
 80012ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012b2:	4a05      	ldr	r2, [pc, #20]	; (80012c8 <SystemInit+0x20>)
 80012b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012bc:	bf00      	nop
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000ed00 	.word	0xe000ed00

080012cc <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART3_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART3_UART_Init+0x4c>)
 8001304:	f001 fcc0 	bl	8002c88 <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f7ff ff49 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000194 	.word	0x20000194
 800131c:	40004800 	.word	0x40004800

08001320 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a34      	ldr	r2, [pc, #208]	; (8001410 <HAL_UART_MspInit+0xf0>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d162      	bne.n	8001408 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	613b      	str	r3, [r7, #16]
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_UART_MspInit+0xf4>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	4a32      	ldr	r2, [pc, #200]	; (8001414 <HAL_UART_MspInit+0xf4>)
 800134c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001350:	6413      	str	r3, [r2, #64]	; 0x40
 8001352:	4b30      	ldr	r3, [pc, #192]	; (8001414 <HAL_UART_MspInit+0xf4>)
 8001354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001356:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60fb      	str	r3, [r7, #12]
 8001362:	4b2c      	ldr	r3, [pc, #176]	; (8001414 <HAL_UART_MspInit+0xf4>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	4a2b      	ldr	r2, [pc, #172]	; (8001414 <HAL_UART_MspInit+0xf4>)
 8001368:	f043 0308 	orr.w	r3, r3, #8
 800136c:	6313      	str	r3, [r2, #48]	; 0x30
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_UART_MspInit+0xf4>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	f003 0308 	and.w	r3, r3, #8
 8001376:	60fb      	str	r3, [r7, #12]
 8001378:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800137a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800137e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001380:	2302      	movs	r3, #2
 8001382:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001384:	2300      	movs	r3, #0
 8001386:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800138c:	2307      	movs	r3, #7
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4619      	mov	r1, r3
 8001396:	4820      	ldr	r0, [pc, #128]	; (8001418 <HAL_UART_MspInit+0xf8>)
 8001398:	f000 fe18 	bl	8001fcc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800139c:	4b1f      	ldr	r3, [pc, #124]	; (800141c <HAL_UART_MspInit+0xfc>)
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_UART_MspInit+0x100>)
 80013a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80013a2:	4b1e      	ldr	r3, [pc, #120]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80013a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013aa:	4b1c      	ldr	r3, [pc, #112]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b0:	4b1a      	ldr	r3, [pc, #104]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013b6:	4b19      	ldr	r3, [pc, #100]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013c4:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80013ca:	4b14      	ldr	r3, [pc, #80]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013d6:	4b11      	ldr	r3, [pc, #68]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013d8:	2200      	movs	r2, #0
 80013da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80013dc:	480f      	ldr	r0, [pc, #60]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013de:	f000 f9f3 	bl	80017c8 <HAL_DMA_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80013e8:	f7ff fedc 	bl	80011a4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a0b      	ldr	r2, [pc, #44]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
 80013f2:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_UART_MspInit+0xfc>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013f8:	2200      	movs	r2, #0
 80013fa:	2100      	movs	r1, #0
 80013fc:	2027      	movs	r0, #39	; 0x27
 80013fe:	f000 f9ac 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001402:	2027      	movs	r0, #39	; 0x27
 8001404:	f000 f9c5 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	40004800 	.word	0x40004800
 8001414:	40023800 	.word	0x40023800
 8001418:	40020c00 	.word	0x40020c00
 800141c:	20000134 	.word	0x20000134
 8001420:	40026028 	.word	0x40026028

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001428:	480d      	ldr	r0, [pc, #52]	; (8001460 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800142a:	490e      	ldr	r1, [pc, #56]	; (8001464 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800142c:	4a0e      	ldr	r2, [pc, #56]	; (8001468 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001440:	4c0b      	ldr	r4, [pc, #44]	; (8001470 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800144e:	f7ff ff2b 	bl	80012a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f002 fdf3 	bl	800403c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff fcb7 	bl	8000dc8 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800145c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001460:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001464:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001468:	080040ec 	.word	0x080040ec
  ldr r2, =_sbss
 800146c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001470:	200001dc 	.word	0x200001dc

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>
	...

08001478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800147c:	4b0e      	ldr	r3, [pc, #56]	; (80014b8 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a0d      	ldr	r2, [pc, #52]	; (80014b8 <HAL_Init+0x40>)
 8001482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001486:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001488:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <HAL_Init+0x40>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a0a      	ldr	r2, [pc, #40]	; (80014b8 <HAL_Init+0x40>)
 800148e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001492:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001494:	4b08      	ldr	r3, [pc, #32]	; (80014b8 <HAL_Init+0x40>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a07      	ldr	r2, [pc, #28]	; (80014b8 <HAL_Init+0x40>)
 800149a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800149e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a0:	2003      	movs	r0, #3
 80014a2:	f000 f94f 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014a6:	2000      	movs	r0, #0
 80014a8:	f000 f808 	bl	80014bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014ac:	f7ff fe80 	bl	80011b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40023c00 	.word	0x40023c00

080014bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014c4:	4b12      	ldr	r3, [pc, #72]	; (8001510 <HAL_InitTick+0x54>)
 80014c6:	681a      	ldr	r2, [r3, #0]
 80014c8:	4b12      	ldr	r3, [pc, #72]	; (8001514 <HAL_InitTick+0x58>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80014d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014da:	4618      	mov	r0, r3
 80014dc:	f000 f967 	bl	80017ae <HAL_SYSTICK_Config>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e00e      	b.n	8001508 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b0f      	cmp	r3, #15
 80014ee:	d80a      	bhi.n	8001506 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f0:	2200      	movs	r2, #0
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	f04f 30ff 	mov.w	r0, #4294967295
 80014f8:	f000 f92f 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014fc:	4a06      	ldr	r2, [pc, #24]	; (8001518 <HAL_InitTick+0x5c>)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
 8001504:	e000      	b.n	8001508 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001506:	2301      	movs	r3, #1
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000008 	.word	0x20000008
 8001514:	20000010 	.word	0x20000010
 8001518:	2000000c 	.word	0x2000000c

0800151c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <HAL_IncTick+0x20>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	461a      	mov	r2, r3
 8001526:	4b06      	ldr	r3, [pc, #24]	; (8001540 <HAL_IncTick+0x24>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4413      	add	r3, r2
 800152c:	4a04      	ldr	r2, [pc, #16]	; (8001540 <HAL_IncTick+0x24>)
 800152e:	6013      	str	r3, [r2, #0]
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20000010 	.word	0x20000010
 8001540:	200001d8 	.word	0x200001d8

08001544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  return uwTick;
 8001548:	4b03      	ldr	r3, [pc, #12]	; (8001558 <HAL_GetTick+0x14>)
 800154a:	681b      	ldr	r3, [r3, #0]
}
 800154c:	4618      	mov	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	200001d8 	.word	0x200001d8

0800155c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001564:	f7ff ffee 	bl	8001544 <HAL_GetTick>
 8001568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001574:	d005      	beq.n	8001582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <HAL_Delay+0x44>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	4413      	add	r3, r2
 8001580:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001582:	bf00      	nop
 8001584:	f7ff ffde 	bl	8001544 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	68bb      	ldr	r3, [r7, #8]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	68fa      	ldr	r2, [r7, #12]
 8001590:	429a      	cmp	r2, r3
 8001592:	d8f7      	bhi.n	8001584 <HAL_Delay+0x28>
  {
  }
}
 8001594:	bf00      	nop
 8001596:	bf00      	nop
 8001598:	3710      	adds	r7, #16
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000010 	.word	0x20000010

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	; (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff feb6 	bl	8001544 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e099      	b.n	8001918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	e00f      	b.n	8001826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001806:	f7ff fe9d 	bl	8001544 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b05      	cmp	r3, #5
 8001812:	d908      	bls.n	8001826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e078      	b.n	8001918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e8      	bne.n	8001806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_DMA_Init+0x158>)
 8001840:	4013      	ands	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2b04      	cmp	r3, #4
 800187e:	d107      	bne.n	8001890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4313      	orrs	r3, r2
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d117      	bne.n	80018ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00e      	beq.n	80018ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 fb01 	bl	8001ed4 <DMA_CheckFifoParam>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e6:	2301      	movs	r3, #1
 80018e8:	e016      	b.n	8001918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 fab8 	bl	8001e68 <DMA_CalcBaseAndBitshift>
 80018f8:	4603      	mov	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	f010803f 	.word	0xf010803f

08001924 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
 8001930:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001932:	2300      	movs	r3, #0
 8001934:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800193a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001942:	2b01      	cmp	r3, #1
 8001944:	d101      	bne.n	800194a <HAL_DMA_Start_IT+0x26>
 8001946:	2302      	movs	r3, #2
 8001948:	e040      	b.n	80019cc <HAL_DMA_Start_IT+0xa8>
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b01      	cmp	r3, #1
 800195c:	d12f      	bne.n	80019be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2202      	movs	r2, #2
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2200      	movs	r2, #0
 800196a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	68f8      	ldr	r0, [r7, #12]
 8001974:	f000 fa4a 	bl	8001e0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	223f      	movs	r2, #63	; 0x3f
 800197e:	409a      	lsls	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f042 0216 	orr.w	r2, r2, #22
 8001992:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001998:	2b00      	cmp	r3, #0
 800199a:	d007      	beq.n	80019ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f042 0208 	orr.w	r2, r2, #8
 80019aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f042 0201 	orr.w	r2, r2, #1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	e005      	b.n	80019ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80019c6:	2302      	movs	r3, #2
 80019c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80019ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3718      	adds	r7, #24
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}

080019d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019e2:	f7ff fdaf 	bl	8001544 <HAL_GetTick>
 80019e6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d008      	beq.n	8001a06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2280      	movs	r2, #128	; 0x80
 80019f8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2200      	movs	r2, #0
 80019fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e052      	b.n	8001aac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0216 	bic.w	r2, r2, #22
 8001a14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	695a      	ldr	r2, [r3, #20]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d103      	bne.n	8001a36 <HAL_DMA_Abort+0x62>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d007      	beq.n	8001a46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 0208 	bic.w	r2, r2, #8
 8001a44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 0201 	bic.w	r2, r2, #1
 8001a54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a56:	e013      	b.n	8001a80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a58:	f7ff fd74 	bl	8001544 <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b05      	cmp	r3, #5
 8001a64:	d90c      	bls.n	8001a80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2220      	movs	r2, #32
 8001a6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2203      	movs	r2, #3
 8001a70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e015      	b.n	8001aac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d1e4      	bne.n	8001a58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a92:	223f      	movs	r2, #63	; 0x3f
 8001a94:	409a      	lsls	r2, r3
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3710      	adds	r7, #16
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d004      	beq.n	8001ad2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2280      	movs	r2, #128	; 0x80
 8001acc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e00c      	b.n	8001aec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2205      	movs	r2, #5
 8001ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f022 0201 	bic.w	r2, r2, #1
 8001ae8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b04:	4b92      	ldr	r3, [pc, #584]	; (8001d50 <HAL_DMA_IRQHandler+0x258>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a92      	ldr	r2, [pc, #584]	; (8001d54 <HAL_DMA_IRQHandler+0x25c>)
 8001b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0e:	0a9b      	lsrs	r3, r3, #10
 8001b10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	2208      	movs	r2, #8
 8001b24:	409a      	lsls	r2, r3
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01a      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f022 0204 	bic.w	r2, r2, #4
 8001b4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b50:	2208      	movs	r2, #8
 8001b52:	409a      	lsls	r2, r3
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	2201      	movs	r2, #1
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d012      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d00b      	beq.n	8001b9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b86:	2201      	movs	r2, #1
 8001b88:	409a      	lsls	r2, r3
 8001b8a:	693b      	ldr	r3, [r7, #16]
 8001b8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b9e:	2204      	movs	r2, #4
 8001ba0:	409a      	lsls	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d012      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 0302 	and.w	r3, r3, #2
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d00b      	beq.n	8001bd0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bbc:	2204      	movs	r2, #4
 8001bbe:	409a      	lsls	r2, r3
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	f043 0204 	orr.w	r2, r3, #4
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4013      	ands	r3, r2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d043      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03c      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf2:	2210      	movs	r2, #16
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d018      	beq.n	8001c3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d108      	bne.n	8001c28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d024      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	4798      	blx	r3
 8001c26:	e01f      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d01b      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	4798      	blx	r3
 8001c38:	e016      	b.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d107      	bne.n	8001c58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0208 	bic.w	r2, r2, #8
 8001c56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d003      	beq.n	8001c68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	2220      	movs	r2, #32
 8001c6e:	409a      	lsls	r2, r3
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	4013      	ands	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	f000 808e 	beq.w	8001d96 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0310 	and.w	r3, r3, #16
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	f000 8086 	beq.w	8001d96 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2220      	movs	r2, #32
 8001c90:	409a      	lsls	r2, r3
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	2b05      	cmp	r3, #5
 8001ca0:	d136      	bne.n	8001d10 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 0216 	bic.w	r2, r2, #22
 8001cb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	695a      	ldr	r2, [r3, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001cc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d103      	bne.n	8001cd2 <HAL_DMA_IRQHandler+0x1da>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d007      	beq.n	8001ce2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0208 	bic.w	r2, r2, #8
 8001ce0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	223f      	movs	r2, #63	; 0x3f
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d07d      	beq.n	8001e02 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
        }
        return;
 8001d0e:	e078      	b.n	8001e02 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d01c      	beq.n	8001d58 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d108      	bne.n	8001d3e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d030      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d38:	6878      	ldr	r0, [r7, #4]
 8001d3a:	4798      	blx	r3
 8001d3c:	e02b      	b.n	8001d96 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d027      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	4798      	blx	r3
 8001d4e:	e022      	b.n	8001d96 <HAL_DMA_IRQHandler+0x29e>
 8001d50:	20000008 	.word	0x20000008
 8001d54:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d10f      	bne.n	8001d86 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0210 	bic.w	r2, r2, #16
 8001d74:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2201      	movs	r2, #1
 8001d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d032      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	f003 0301 	and.w	r3, r3, #1
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d022      	beq.n	8001df0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2205      	movs	r2, #5
 8001dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	429a      	cmp	r2, r3
 8001dcc:	d307      	bcc.n	8001dde <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1f2      	bne.n	8001dc2 <HAL_DMA_IRQHandler+0x2ca>
 8001ddc:	e000      	b.n	8001de0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001dde:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
 8001e00:	e000      	b.n	8001e04 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001e02:	bf00      	nop
    }
  }
}
 8001e04:	3718      	adds	r7, #24
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop

08001e0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	60f8      	str	r0, [r7, #12]
 8001e14:	60b9      	str	r1, [r7, #8]
 8001e16:	607a      	str	r2, [r7, #4]
 8001e18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b40      	cmp	r3, #64	; 0x40
 8001e38:	d108      	bne.n	8001e4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e4a:	e007      	b.n	8001e5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	68ba      	ldr	r2, [r7, #8]
 8001e52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	60da      	str	r2, [r3, #12]
}
 8001e5c:	bf00      	nop
 8001e5e:	3714      	adds	r7, #20
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr

08001e68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	3b10      	subs	r3, #16
 8001e78:	4a14      	ldr	r2, [pc, #80]	; (8001ecc <DMA_CalcBaseAndBitshift+0x64>)
 8001e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7e:	091b      	lsrs	r3, r3, #4
 8001e80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e82:	4a13      	ldr	r2, [pc, #76]	; (8001ed0 <DMA_CalcBaseAndBitshift+0x68>)
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	2b03      	cmp	r3, #3
 8001e94:	d909      	bls.n	8001eaa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e9e:	f023 0303 	bic.w	r3, r3, #3
 8001ea2:	1d1a      	adds	r2, r3, #4
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	659a      	str	r2, [r3, #88]	; 0x58
 8001ea8:	e007      	b.n	8001eba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eb2:	f023 0303 	bic.w	r3, r3, #3
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	aaaaaaab 	.word	0xaaaaaaab
 8001ed0:	080040d4 	.word	0x080040d4

08001ed4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d11f      	bne.n	8001f2e <DMA_CheckFifoParam+0x5a>
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	2b03      	cmp	r3, #3
 8001ef2:	d856      	bhi.n	8001fa2 <DMA_CheckFifoParam+0xce>
 8001ef4:	a201      	add	r2, pc, #4	; (adr r2, 8001efc <DMA_CheckFifoParam+0x28>)
 8001ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001efa:	bf00      	nop
 8001efc:	08001f0d 	.word	0x08001f0d
 8001f00:	08001f1f 	.word	0x08001f1f
 8001f04:	08001f0d 	.word	0x08001f0d
 8001f08:	08001fa3 	.word	0x08001fa3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d046      	beq.n	8001fa6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f1c:	e043      	b.n	8001fa6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f26:	d140      	bne.n	8001faa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2c:	e03d      	b.n	8001faa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	699b      	ldr	r3, [r3, #24]
 8001f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f36:	d121      	bne.n	8001f7c <DMA_CheckFifoParam+0xa8>
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	2b03      	cmp	r3, #3
 8001f3c:	d837      	bhi.n	8001fae <DMA_CheckFifoParam+0xda>
 8001f3e:	a201      	add	r2, pc, #4	; (adr r2, 8001f44 <DMA_CheckFifoParam+0x70>)
 8001f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f44:	08001f55 	.word	0x08001f55
 8001f48:	08001f5b 	.word	0x08001f5b
 8001f4c:	08001f55 	.word	0x08001f55
 8001f50:	08001f6d 	.word	0x08001f6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	73fb      	strb	r3, [r7, #15]
      break;
 8001f58:	e030      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d025      	beq.n	8001fb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f6a:	e022      	b.n	8001fb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f74:	d11f      	bne.n	8001fb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f7a:	e01c      	b.n	8001fb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d903      	bls.n	8001f8a <DMA_CheckFifoParam+0xb6>
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	2b03      	cmp	r3, #3
 8001f86:	d003      	beq.n	8001f90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f88:	e018      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f8e:	e015      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d00e      	beq.n	8001fba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      break;
 8001fa0:	e00b      	b.n	8001fba <DMA_CheckFifoParam+0xe6>
      break;
 8001fa2:	bf00      	nop
 8001fa4:	e00a      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fa6:	bf00      	nop
 8001fa8:	e008      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001faa:	bf00      	nop
 8001fac:	e006      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fae:	bf00      	nop
 8001fb0:	e004      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fb2:	bf00      	nop
 8001fb4:	e002      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;   
 8001fb6:	bf00      	nop
 8001fb8:	e000      	b.n	8001fbc <DMA_CheckFifoParam+0xe8>
      break;
 8001fba:	bf00      	nop
    }
  } 
  
  return status; 
 8001fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop

08001fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	; 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	e177      	b.n	80022d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fe8:	2201      	movs	r2, #1
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	429a      	cmp	r2, r3
 8002002:	f040 8166 	bne.w	80022d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f003 0303 	and.w	r3, r3, #3
 800200e:	2b01      	cmp	r3, #1
 8002010:	d005      	beq.n	800201e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800201a:	2b02      	cmp	r3, #2
 800201c:	d130      	bne.n	8002080 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	2203      	movs	r2, #3
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43db      	mvns	r3, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4013      	ands	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	69ba      	ldr	r2, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	43db      	mvns	r3, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4013      	ands	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0201 	and.w	r2, r3, #1
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	69ba      	ldr	r2, [r7, #24]
 8002076:	4313      	orrs	r3, r2
 8002078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0303 	and.w	r3, r3, #3
 8002088:	2b03      	cmp	r3, #3
 800208a:	d017      	beq.n	80020bc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	68db      	ldr	r3, [r3, #12]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	2203      	movs	r2, #3
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	43db      	mvns	r3, r3
 800209e:	69ba      	ldr	r2, [r7, #24]
 80020a0:	4013      	ands	r3, r2
 80020a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	69ba      	ldr	r2, [r7, #24]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f003 0303 	and.w	r3, r3, #3
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	d123      	bne.n	8002110 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	08da      	lsrs	r2, r3, #3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3208      	adds	r2, #8
 80020d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	220f      	movs	r2, #15
 80020e0:	fa02 f303 	lsl.w	r3, r2, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	691a      	ldr	r2, [r3, #16]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f003 0307 	and.w	r3, r3, #7
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	fa02 f303 	lsl.w	r3, r2, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4313      	orrs	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	08da      	lsrs	r2, r3, #3
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	3208      	adds	r2, #8
 800210a:	69b9      	ldr	r1, [r7, #24]
 800210c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	005b      	lsls	r3, r3, #1
 800211a:	2203      	movs	r2, #3
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0203 	and.w	r2, r3, #3
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 80c0 	beq.w	80022d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b66      	ldr	r3, [pc, #408]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a65      	ldr	r2, [pc, #404]	; (80022f0 <HAL_GPIO_Init+0x324>)
 800215c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <HAL_GPIO_Init+0x324>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800216e:	4a61      	ldr	r2, [pc, #388]	; (80022f4 <HAL_GPIO_Init+0x328>)
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	089b      	lsrs	r3, r3, #2
 8002174:	3302      	adds	r3, #2
 8002176:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800217a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	f003 0303 	and.w	r3, r3, #3
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	220f      	movs	r2, #15
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43db      	mvns	r3, r3
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	4013      	ands	r3, r2
 8002190:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_GPIO_Init+0x32c>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d037      	beq.n	800220a <HAL_GPIO_Init+0x23e>
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a57      	ldr	r2, [pc, #348]	; (80022fc <HAL_GPIO_Init+0x330>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d031      	beq.n	8002206 <HAL_GPIO_Init+0x23a>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	4a56      	ldr	r2, [pc, #344]	; (8002300 <HAL_GPIO_Init+0x334>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d02b      	beq.n	8002202 <HAL_GPIO_Init+0x236>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a55      	ldr	r2, [pc, #340]	; (8002304 <HAL_GPIO_Init+0x338>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d025      	beq.n	80021fe <HAL_GPIO_Init+0x232>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a54      	ldr	r2, [pc, #336]	; (8002308 <HAL_GPIO_Init+0x33c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <HAL_GPIO_Init+0x22e>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a53      	ldr	r2, [pc, #332]	; (800230c <HAL_GPIO_Init+0x340>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d019      	beq.n	80021f6 <HAL_GPIO_Init+0x22a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	; (8002310 <HAL_GPIO_Init+0x344>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_GPIO_Init+0x226>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a51      	ldr	r2, [pc, #324]	; (8002314 <HAL_GPIO_Init+0x348>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00d      	beq.n	80021ee <HAL_GPIO_Init+0x222>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a50      	ldr	r2, [pc, #320]	; (8002318 <HAL_GPIO_Init+0x34c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d007      	beq.n	80021ea <HAL_GPIO_Init+0x21e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4f      	ldr	r2, [pc, #316]	; (800231c <HAL_GPIO_Init+0x350>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d101      	bne.n	80021e6 <HAL_GPIO_Init+0x21a>
 80021e2:	2309      	movs	r3, #9
 80021e4:	e012      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021e6:	230a      	movs	r3, #10
 80021e8:	e010      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021ea:	2308      	movs	r3, #8
 80021ec:	e00e      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021ee:	2307      	movs	r3, #7
 80021f0:	e00c      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021f2:	2306      	movs	r3, #6
 80021f4:	e00a      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021f6:	2305      	movs	r3, #5
 80021f8:	e008      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021fa:	2304      	movs	r3, #4
 80021fc:	e006      	b.n	800220c <HAL_GPIO_Init+0x240>
 80021fe:	2303      	movs	r3, #3
 8002200:	e004      	b.n	800220c <HAL_GPIO_Init+0x240>
 8002202:	2302      	movs	r3, #2
 8002204:	e002      	b.n	800220c <HAL_GPIO_Init+0x240>
 8002206:	2301      	movs	r3, #1
 8002208:	e000      	b.n	800220c <HAL_GPIO_Init+0x240>
 800220a:	2300      	movs	r3, #0
 800220c:	69fa      	ldr	r2, [r7, #28]
 800220e:	f002 0203 	and.w	r2, r2, #3
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	4093      	lsls	r3, r2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	4313      	orrs	r3, r2
 800221a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800221c:	4935      	ldr	r1, [pc, #212]	; (80022f4 <HAL_GPIO_Init+0x328>)
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	089b      	lsrs	r3, r3, #2
 8002222:	3302      	adds	r3, #2
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800222a:	4b3d      	ldr	r3, [pc, #244]	; (8002320 <HAL_GPIO_Init+0x354>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002242:	2b00      	cmp	r3, #0
 8002244:	d003      	beq.n	800224e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800224e:	4a34      	ldr	r2, [pc, #208]	; (8002320 <HAL_GPIO_Init+0x354>)
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002254:	4b32      	ldr	r3, [pc, #200]	; (8002320 <HAL_GPIO_Init+0x354>)
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d003      	beq.n	8002278 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4313      	orrs	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <HAL_GPIO_Init+0x354>)
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800227e:	4b28      	ldr	r3, [pc, #160]	; (8002320 <HAL_GPIO_Init+0x354>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	43db      	mvns	r3, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4013      	ands	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <HAL_GPIO_Init+0x354>)
 80022a4:	69bb      	ldr	r3, [r7, #24]
 80022a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022a8:	4b1d      	ldr	r3, [pc, #116]	; (8002320 <HAL_GPIO_Init+0x354>)
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	43db      	mvns	r3, r3
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	4013      	ands	r3, r2
 80022b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d003      	beq.n	80022cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <HAL_GPIO_Init+0x354>)
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	3301      	adds	r3, #1
 80022d6:	61fb      	str	r3, [r7, #28]
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	2b0f      	cmp	r3, #15
 80022dc:	f67f ae84 	bls.w	8001fe8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022e0:	bf00      	nop
 80022e2:	bf00      	nop
 80022e4:	3724      	adds	r7, #36	; 0x24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr
 80022ee:	bf00      	nop
 80022f0:	40023800 	.word	0x40023800
 80022f4:	40013800 	.word	0x40013800
 80022f8:	40020000 	.word	0x40020000
 80022fc:	40020400 	.word	0x40020400
 8002300:	40020800 	.word	0x40020800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40021000 	.word	0x40021000
 800230c:	40021400 	.word	0x40021400
 8002310:	40021800 	.word	0x40021800
 8002314:	40021c00 	.word	0x40021c00
 8002318:	40022000 	.word	0x40022000
 800231c:	40022400 	.word	0x40022400
 8002320:	40013c00 	.word	0x40013c00

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002340:	e003      	b.n	800234a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002342:	887b      	ldrh	r3, [r7, #2]
 8002344:	041a      	lsls	r2, r3, #16
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	619a      	str	r2, [r3, #24]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	4603      	mov	r3, r0
 8002360:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002362:	4b08      	ldr	r3, [pc, #32]	; (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002364:	695a      	ldr	r2, [r3, #20]
 8002366:	88fb      	ldrh	r3, [r7, #6]
 8002368:	4013      	ands	r3, r2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d006      	beq.n	800237c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800236e:	4a05      	ldr	r2, [pc, #20]	; (8002384 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002370:	88fb      	ldrh	r3, [r7, #6]
 8002372:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	4618      	mov	r0, r3
 8002378:	f000 f806 	bl	8002388 <HAL_GPIO_EXTI_Callback>
  }
}
 800237c:	bf00      	nop
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}
 8002384:	40013c00 	.word	0x40013c00

08002388 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002388:	b480      	push	{r7}
 800238a:	b083      	sub	sp, #12
 800238c:	af00      	add	r7, sp, #0
 800238e:	4603      	mov	r3, r0
 8002390:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr
	...

080023a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b086      	sub	sp, #24
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e264      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0301 	and.w	r3, r3, #1
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d075      	beq.n	80024aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023be:	4ba3      	ldr	r3, [pc, #652]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f003 030c 	and.w	r3, r3, #12
 80023c6:	2b04      	cmp	r3, #4
 80023c8:	d00c      	beq.n	80023e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ca:	4ba0      	ldr	r3, [pc, #640]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d2:	2b08      	cmp	r3, #8
 80023d4:	d112      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023d6:	4b9d      	ldr	r3, [pc, #628]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e2:	d10b      	bne.n	80023fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e4:	4b99      	ldr	r3, [pc, #612]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d05b      	beq.n	80024a8 <HAL_RCC_OscConfig+0x108>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d157      	bne.n	80024a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e23f      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002404:	d106      	bne.n	8002414 <HAL_RCC_OscConfig+0x74>
 8002406:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a90      	ldr	r2, [pc, #576]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0x98>
 800241e:	4b8b      	ldr	r3, [pc, #556]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a8a      	ldr	r2, [pc, #552]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a87      	ldr	r2, [pc, #540]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xb0>
 8002438:	4b84      	ldr	r3, [pc, #528]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a83      	ldr	r2, [pc, #524]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b81      	ldr	r3, [pc, #516]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a80      	ldr	r2, [pc, #512]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f874 	bl	8001544 <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f870 	bl	8001544 <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e204      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b76      	ldr	r3, [pc, #472]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xc0>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff f860 	bl	8001544 <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff f85c 	bl	8001544 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e1f0      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0xe8>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024b6:	4b65      	ldr	r3, [pc, #404]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c2:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024ce:	4b5f      	ldr	r3, [pc, #380]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b5c      	ldr	r3, [pc, #368]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e1c4      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b56      	ldr	r3, [pc, #344]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4952      	ldr	r1, [pc, #328]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b4f      	ldr	r3, [pc, #316]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002516:	f7ff f815 	bl	8001544 <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff f811 	bl	8001544 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e1a5      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b46      	ldr	r3, [pc, #280]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b43      	ldr	r3, [pc, #268]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4940      	ldr	r1, [pc, #256]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b3f      	ldr	r3, [pc, #252]	; (8002650 <HAL_RCC_OscConfig+0x2b0>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002558:	f7fe fff4 	bl	8001544 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002560:	f7fe fff0 	bl	8001544 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e184      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b36      	ldr	r3, [pc, #216]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d030      	beq.n	80025ec <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d016      	beq.n	80025c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b30      	ldr	r3, [pc, #192]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002598:	f7fe ffd4 	bl	8001544 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a0:	f7fe ffd0 	bl	8001544 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e164      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b26      	ldr	r3, [pc, #152]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x200>
 80025be:	e015      	b.n	80025ec <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c0:	4b24      	ldr	r3, [pc, #144]	; (8002654 <HAL_RCC_OscConfig+0x2b4>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7fe ffbd 	bl	8001544 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ce:	f7fe ffb9 	bl	8001544 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e14d      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e0:	4b1a      	ldr	r3, [pc, #104]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 80025e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e4:	f003 0302 	and.w	r3, r3, #2
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1f0      	bne.n	80025ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80a0 	beq.w	800273a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025fa:	2300      	movs	r3, #0
 80025fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fe:	4b13      	ldr	r3, [pc, #76]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d10f      	bne.n	800262a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	60bb      	str	r3, [r7, #8]
 800260e:	4b0f      	ldr	r3, [pc, #60]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	; 0x40
 800261a:	4b0c      	ldr	r3, [pc, #48]	; (800264c <HAL_RCC_OscConfig+0x2ac>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002622:	60bb      	str	r3, [r7, #8]
 8002624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002626:	2301      	movs	r3, #1
 8002628:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	2b00      	cmp	r3, #0
 8002634:	d121      	bne.n	800267a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002636:	4b08      	ldr	r3, [pc, #32]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a07      	ldr	r2, [pc, #28]	; (8002658 <HAL_RCC_OscConfig+0x2b8>)
 800263c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002640:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002642:	f7fe ff7f 	bl	8001544 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002648:	e011      	b.n	800266e <HAL_RCC_OscConfig+0x2ce>
 800264a:	bf00      	nop
 800264c:	40023800 	.word	0x40023800
 8002650:	42470000 	.word	0x42470000
 8002654:	42470e80 	.word	0x42470e80
 8002658:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265c:	f7fe ff72 	bl	8001544 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e106      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266e:	4b85      	ldr	r3, [pc, #532]	; (8002884 <HAL_RCC_OscConfig+0x4e4>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	689b      	ldr	r3, [r3, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x2f0>
 8002682:	4b81      	ldr	r3, [pc, #516]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	4a80      	ldr	r2, [pc, #512]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002688:	f043 0301 	orr.w	r3, r3, #1
 800268c:	6713      	str	r3, [r2, #112]	; 0x70
 800268e:	e01c      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	2b05      	cmp	r3, #5
 8002696:	d10c      	bne.n	80026b2 <HAL_RCC_OscConfig+0x312>
 8002698:	4b7b      	ldr	r3, [pc, #492]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 800269a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269c:	4a7a      	ldr	r2, [pc, #488]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 800269e:	f043 0304 	orr.w	r3, r3, #4
 80026a2:	6713      	str	r3, [r2, #112]	; 0x70
 80026a4:	4b78      	ldr	r3, [pc, #480]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a8:	4a77      	ldr	r2, [pc, #476]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6713      	str	r3, [r2, #112]	; 0x70
 80026b0:	e00b      	b.n	80026ca <HAL_RCC_OscConfig+0x32a>
 80026b2:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b6:	4a74      	ldr	r2, [pc, #464]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	f023 0301 	bic.w	r3, r3, #1
 80026bc:	6713      	str	r3, [r2, #112]	; 0x70
 80026be:	4b72      	ldr	r3, [pc, #456]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c2:	4a71      	ldr	r2, [pc, #452]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026c4:	f023 0304 	bic.w	r3, r3, #4
 80026c8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d015      	beq.n	80026fe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7fe ff37 	bl	8001544 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe ff33 	bl	8001544 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e0c5      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f0:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80026f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d0ee      	beq.n	80026da <HAL_RCC_OscConfig+0x33a>
 80026fc:	e014      	b.n	8002728 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fe:	f7fe ff21 	bl	8001544 <HAL_GetTick>
 8002702:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002704:	e00a      	b.n	800271c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002706:	f7fe ff1d 	bl	8001544 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	f241 3288 	movw	r2, #5000	; 0x1388
 8002714:	4293      	cmp	r3, r2
 8002716:	d901      	bls.n	800271c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002718:	2303      	movs	r3, #3
 800271a:	e0af      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271c:	4b5a      	ldr	r3, [pc, #360]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f003 0302 	and.w	r3, r3, #2
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1ee      	bne.n	8002706 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002728:	7dfb      	ldrb	r3, [r7, #23]
 800272a:	2b01      	cmp	r3, #1
 800272c:	d105      	bne.n	800273a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272e:	4b56      	ldr	r3, [pc, #344]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002732:	4a55      	ldr	r2, [pc, #340]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002734:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002738:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	2b00      	cmp	r3, #0
 8002740:	f000 809b 	beq.w	800287a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002744:	4b50      	ldr	r3, [pc, #320]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 030c 	and.w	r3, r3, #12
 800274c:	2b08      	cmp	r3, #8
 800274e:	d05c      	beq.n	800280a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d141      	bne.n	80027dc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002758:	4b4c      	ldr	r3, [pc, #304]	; (800288c <HAL_RCC_OscConfig+0x4ec>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fef1 	bl	8001544 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002766:	f7fe feed 	bl	8001544 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e081      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1f0      	bne.n	8002766 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69da      	ldr	r2, [r3, #28]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002792:	019b      	lsls	r3, r3, #6
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	3b01      	subs	r3, #1
 800279e:	041b      	lsls	r3, r3, #16
 80027a0:	431a      	orrs	r2, r3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a6:	061b      	lsls	r3, r3, #24
 80027a8:	4937      	ldr	r1, [pc, #220]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_OscConfig+0x4ec>)
 80027b0:	2201      	movs	r2, #1
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fec6 	bl	8001544 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fec2 	bl	8001544 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e056      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ce:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x41c>
 80027da:	e04e      	b.n	800287a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_OscConfig+0x4ec>)
 80027de:	2200      	movs	r2, #0
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7fe feaf 	bl	8001544 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ea:	f7fe feab 	bl	8001544 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e03f      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fc:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1f0      	bne.n	80027ea <HAL_RCC_OscConfig+0x44a>
 8002808:	e037      	b.n	800287a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002812:	2301      	movs	r3, #1
 8002814:	e032      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0x4e8>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	699b      	ldr	r3, [r3, #24]
 8002820:	2b01      	cmp	r3, #1
 8002822:	d028      	beq.n	8002876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d121      	bne.n	8002876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283c:	429a      	cmp	r2, r3
 800283e:	d11a      	bne.n	8002876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002846:	4013      	ands	r3, r2
 8002848:	687a      	ldr	r2, [r7, #4]
 800284a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800284c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800284e:	4293      	cmp	r3, r2
 8002850:	d111      	bne.n	8002876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	3b01      	subs	r3, #1
 8002860:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40007000 	.word	0x40007000
 8002888:	40023800 	.word	0x40023800
 800288c:	42470060 	.word	0x42470060

08002890 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e0cc      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a4:	4b68      	ldr	r3, [pc, #416]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 030f 	and.w	r3, r3, #15
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d90c      	bls.n	80028cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b2:	4b65      	ldr	r3, [pc, #404]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	b2d2      	uxtb	r2, r2
 80028b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b63      	ldr	r3, [pc, #396]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d001      	beq.n	80028cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e0b8      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d020      	beq.n	800291a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0304 	and.w	r3, r3, #4
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d005      	beq.n	80028f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e4:	4b59      	ldr	r3, [pc, #356]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4a58      	ldr	r2, [pc, #352]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028fc:	4b53      	ldr	r3, [pc, #332]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002906:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002908:	4b50      	ldr	r3, [pc, #320]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	494d      	ldr	r1, [pc, #308]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d044      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d107      	bne.n	800293e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d119      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e07f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d003      	beq.n	800294e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294a:	2b03      	cmp	r3, #3
 800294c:	d107      	bne.n	800295e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800294e:	4b3f      	ldr	r3, [pc, #252]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d109      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e06f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800295e:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e067      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800296e:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f023 0203 	bic.w	r2, r3, #3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	4934      	ldr	r1, [pc, #208]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002980:	f7fe fde0 	bl	8001544 <HAL_GetTick>
 8002984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002986:	e00a      	b.n	800299e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002988:	f7fe fddc 	bl	8001544 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	f241 3288 	movw	r2, #5000	; 0x1388
 8002996:	4293      	cmp	r3, r2
 8002998:	d901      	bls.n	800299e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e04f      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800299e:	4b2b      	ldr	r3, [pc, #172]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029a0:	689b      	ldr	r3, [r3, #8]
 80029a2:	f003 020c 	and.w	r2, r3, #12
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d1eb      	bne.n	8002988 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b0:	4b25      	ldr	r3, [pc, #148]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 030f 	and.w	r3, r3, #15
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d20c      	bcs.n	80029d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b22      	ldr	r3, [pc, #136]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_RCC_ClockConfig+0x1b8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d001      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e032      	b.n	8002a3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d008      	beq.n	80029f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	4916      	ldr	r1, [pc, #88]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d009      	beq.n	8002a16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a02:	4b12      	ldr	r3, [pc, #72]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	00db      	lsls	r3, r3, #3
 8002a10:	490e      	ldr	r1, [pc, #56]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a16:	f000 f821 	bl	8002a5c <HAL_RCC_GetSysClockFreq>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	4b0b      	ldr	r3, [pc, #44]	; (8002a4c <HAL_RCC_ClockConfig+0x1bc>)
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	490a      	ldr	r1, [pc, #40]	; (8002a50 <HAL_RCC_ClockConfig+0x1c0>)
 8002a28:	5ccb      	ldrb	r3, [r1, r3]
 8002a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2e:	4a09      	ldr	r2, [pc, #36]	; (8002a54 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a32:	4b09      	ldr	r3, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1c8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe fd40 	bl	80014bc <HAL_InitTick>

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40023c00 	.word	0x40023c00
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	080040bc 	.word	0x080040bc
 8002a54:	20000008 	.word	0x20000008
 8002a58:	2000000c 	.word	0x2000000c

08002a5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a60:	b084      	sub	sp, #16
 8002a62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a74:	4b67      	ldr	r3, [pc, #412]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 030c 	and.w	r3, r3, #12
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d00d      	beq.n	8002a9c <HAL_RCC_GetSysClockFreq+0x40>
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	f200 80bd 	bhi.w	8002c00 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_RCC_GetSysClockFreq+0x34>
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	d003      	beq.n	8002a96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002a8e:	e0b7      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a90:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a92:	60bb      	str	r3, [r7, #8]
       break;
 8002a94:	e0b7      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002a98:	60bb      	str	r3, [r7, #8]
      break;
 8002a9a:	e0b4      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a9c:	4b5d      	ldr	r3, [pc, #372]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aa6:	4b5b      	ldr	r3, [pc, #364]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d04d      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab2:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	461a      	mov	r2, r3
 8002aba:	f04f 0300 	mov.w	r3, #0
 8002abe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002ac2:	f04f 0100 	mov.w	r1, #0
 8002ac6:	ea02 0800 	and.w	r8, r2, r0
 8002aca:	ea03 0901 	and.w	r9, r3, r1
 8002ace:	4640      	mov	r0, r8
 8002ad0:	4649      	mov	r1, r9
 8002ad2:	f04f 0200 	mov.w	r2, #0
 8002ad6:	f04f 0300 	mov.w	r3, #0
 8002ada:	014b      	lsls	r3, r1, #5
 8002adc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ae0:	0142      	lsls	r2, r0, #5
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	ebb0 0008 	subs.w	r0, r0, r8
 8002aea:	eb61 0109 	sbc.w	r1, r1, r9
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	f04f 0300 	mov.w	r3, #0
 8002af6:	018b      	lsls	r3, r1, #6
 8002af8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002afc:	0182      	lsls	r2, r0, #6
 8002afe:	1a12      	subs	r2, r2, r0
 8002b00:	eb63 0301 	sbc.w	r3, r3, r1
 8002b04:	f04f 0000 	mov.w	r0, #0
 8002b08:	f04f 0100 	mov.w	r1, #0
 8002b0c:	00d9      	lsls	r1, r3, #3
 8002b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b12:	00d0      	lsls	r0, r2, #3
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	eb12 0208 	adds.w	r2, r2, r8
 8002b1c:	eb43 0309 	adc.w	r3, r3, r9
 8002b20:	f04f 0000 	mov.w	r0, #0
 8002b24:	f04f 0100 	mov.w	r1, #0
 8002b28:	0259      	lsls	r1, r3, #9
 8002b2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b2e:	0250      	lsls	r0, r2, #9
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	f04f 0300 	mov.w	r3, #0
 8002b40:	f7fd fe8c 	bl	800085c <__aeabi_uldivmod>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4613      	mov	r3, r2
 8002b4a:	60fb      	str	r3, [r7, #12]
 8002b4c:	e04a      	b.n	8002be4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b4e:	4b31      	ldr	r3, [pc, #196]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	099b      	lsrs	r3, r3, #6
 8002b54:	461a      	mov	r2, r3
 8002b56:	f04f 0300 	mov.w	r3, #0
 8002b5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	ea02 0400 	and.w	r4, r2, r0
 8002b66:	ea03 0501 	and.w	r5, r3, r1
 8002b6a:	4620      	mov	r0, r4
 8002b6c:	4629      	mov	r1, r5
 8002b6e:	f04f 0200 	mov.w	r2, #0
 8002b72:	f04f 0300 	mov.w	r3, #0
 8002b76:	014b      	lsls	r3, r1, #5
 8002b78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b7c:	0142      	lsls	r2, r0, #5
 8002b7e:	4610      	mov	r0, r2
 8002b80:	4619      	mov	r1, r3
 8002b82:	1b00      	subs	r0, r0, r4
 8002b84:	eb61 0105 	sbc.w	r1, r1, r5
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	f04f 0300 	mov.w	r3, #0
 8002b90:	018b      	lsls	r3, r1, #6
 8002b92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b96:	0182      	lsls	r2, r0, #6
 8002b98:	1a12      	subs	r2, r2, r0
 8002b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b9e:	f04f 0000 	mov.w	r0, #0
 8002ba2:	f04f 0100 	mov.w	r1, #0
 8002ba6:	00d9      	lsls	r1, r3, #3
 8002ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002bac:	00d0      	lsls	r0, r2, #3
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	1912      	adds	r2, r2, r4
 8002bb4:	eb45 0303 	adc.w	r3, r5, r3
 8002bb8:	f04f 0000 	mov.w	r0, #0
 8002bbc:	f04f 0100 	mov.w	r1, #0
 8002bc0:	0299      	lsls	r1, r3, #10
 8002bc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bc6:	0290      	lsls	r0, r2, #10
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4610      	mov	r0, r2
 8002bce:	4619      	mov	r1, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f04f 0300 	mov.w	r3, #0
 8002bd8:	f7fd fe40 	bl	800085c <__aeabi_uldivmod>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4613      	mov	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	; (8002c14 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	0c1b      	lsrs	r3, r3, #16
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	3301      	adds	r3, #1
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfc:	60bb      	str	r3, [r7, #8]
      break;
 8002bfe:	e002      	b.n	8002c06 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c00:	4b05      	ldr	r3, [pc, #20]	; (8002c18 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c02:	60bb      	str	r3, [r7, #8]
      break;
 8002c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c06:	68bb      	ldr	r3, [r7, #8]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c12:	bf00      	nop
 8002c14:	40023800 	.word	0x40023800
 8002c18:	00f42400 	.word	0x00f42400
 8002c1c:	007a1200 	.word	0x007a1200

08002c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c24:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c26:	681b      	ldr	r3, [r3, #0]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000008 	.word	0x20000008

08002c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c3c:	f7ff fff0 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c40:	4602      	mov	r2, r0
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	0a9b      	lsrs	r3, r3, #10
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	4903      	ldr	r1, [pc, #12]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c4e:	5ccb      	ldrb	r3, [r1, r3]
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40023800 	.word	0x40023800
 8002c5c:	080040cc 	.word	0x080040cc

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c64:	f7ff ffdc 	bl	8002c20 <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0b5b      	lsrs	r3, r3, #13
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4903      	ldr	r1, [pc, #12]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40023800 	.word	0x40023800
 8002c84:	080040cc 	.word	0x080040cc

08002c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e03f      	b.n	8002d1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca0:	b2db      	uxtb	r3, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d106      	bne.n	8002cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7fe fb36 	bl	8001320 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2224      	movs	r2, #36	; 0x24
 8002cb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f000 ffed 	bl	8003cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b08a      	sub	sp, #40	; 0x28
 8002d26:	af02      	add	r7, sp, #8
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	603b      	str	r3, [r7, #0]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d17c      	bne.n	8002e3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_UART_Transmit+0x2c>
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e075      	b.n	8002e3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d101      	bne.n	8002d60 <HAL_UART_Transmit+0x3e>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e06e      	b.n	8002e3e <HAL_UART_Transmit+0x11c>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2221      	movs	r2, #33	; 0x21
 8002d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d76:	f7fe fbe5 	bl	8001544 <HAL_GetTick>
 8002d7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	88fa      	ldrh	r2, [r7, #6]
 8002d80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	88fa      	ldrh	r2, [r7, #6]
 8002d86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d90:	d108      	bne.n	8002da4 <HAL_UART_Transmit+0x82>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	691b      	ldr	r3, [r3, #16]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	61bb      	str	r3, [r7, #24]
 8002da2:	e003      	b.n	8002dac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002db4:	e02a      	b.n	8002e0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	2180      	movs	r1, #128	; 0x80
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 fca9 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e036      	b.n	8002e3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10b      	bne.n	8002dee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	881b      	ldrh	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002de4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	3302      	adds	r3, #2
 8002dea:	61bb      	str	r3, [r7, #24]
 8002dec:	e007      	b.n	8002dfe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	781a      	ldrb	r2, [r3, #0]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	3b01      	subs	r3, #1
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1cf      	bne.n	8002db6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	2140      	movs	r1, #64	; 0x40
 8002e20:	68f8      	ldr	r0, [r7, #12]
 8002e22:	f000 fc79 	bl	8003718 <UART_WaitOnFlagUntilTimeout>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	e006      	b.n	8002e3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2220      	movs	r2, #32
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e000      	b.n	8002e3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002e3c:	2302      	movs	r3, #2
  }
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3720      	adds	r7, #32
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b084      	sub	sp, #16
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	60b9      	str	r1, [r7, #8]
 8002e50:	4613      	mov	r3, r2
 8002e52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d11d      	bne.n	8002e9c <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_UART_Receive_DMA+0x26>
 8002e66:	88fb      	ldrh	r3, [r7, #6]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e016      	b.n	8002e9e <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d101      	bne.n	8002e7e <HAL_UART_Receive_DMA+0x38>
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	e00f      	b.n	8002e9e <HAL_UART_Receive_DMA+0x58>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002e8c:	88fb      	ldrh	r3, [r7, #6]
 8002e8e:	461a      	mov	r2, r3
 8002e90:	68b9      	ldr	r1, [r7, #8]
 8002e92:	68f8      	ldr	r0, [r7, #12]
 8002e94:	f000 fcae 	bl	80037f4 <UART_Start_Receive_DMA>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	e000      	b.n	8002e9e <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8002e9c:	2302      	movs	r3, #2
  }
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b090      	sub	sp, #64	; 0x40
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	695b      	ldr	r3, [r3, #20]
 8002eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebc:	2b80      	cmp	r3, #128	; 0x80
 8002ebe:	bf0c      	ite	eq
 8002ec0:	2301      	moveq	r3, #1
 8002ec2:	2300      	movne	r3, #0
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ece:	b2db      	uxtb	r3, r3
 8002ed0:	2b21      	cmp	r3, #33	; 0x21
 8002ed2:	d128      	bne.n	8002f26 <HAL_UART_DMAStop+0x80>
 8002ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d025      	beq.n	8002f26 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	3314      	adds	r3, #20
 8002ee0:	627b      	str	r3, [r7, #36]	; 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee4:	e853 3f00 	ldrex	r3, [r3]
 8002ee8:	623b      	str	r3, [r7, #32]
   return(result);
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ef0:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3314      	adds	r3, #20
 8002ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002efa:	633a      	str	r2, [r7, #48]	; 0x30
 8002efc:	62fb      	str	r3, [r7, #44]	; 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002efe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f02:	e841 2300 	strex	r3, r2, [r1]
 8002f06:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1e5      	bne.n	8002eda <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d004      	beq.n	8002f20 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fd5a 	bl	80019d4 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 fd01 	bl	8003928 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	695b      	ldr	r3, [r3, #20]
 8002f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f30:	2b40      	cmp	r3, #64	; 0x40
 8002f32:	bf0c      	ite	eq
 8002f34:	2301      	moveq	r3, #1
 8002f36:	2300      	movne	r3, #0
 8002f38:	b2db      	uxtb	r3, r3
 8002f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b22      	cmp	r3, #34	; 0x22
 8002f46:	d128      	bne.n	8002f9a <HAL_UART_DMAStop+0xf4>
 8002f48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d025      	beq.n	8002f9a <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	3314      	adds	r3, #20
 8002f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	e853 3f00 	ldrex	r3, [r3]
 8002f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f64:	637b      	str	r3, [r7, #52]	; 0x34
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3314      	adds	r3, #20
 8002f6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f6e:	61fa      	str	r2, [r7, #28]
 8002f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f72:	69b9      	ldr	r1, [r7, #24]
 8002f74:	69fa      	ldr	r2, [r7, #28]
 8002f76:	e841 2300 	strex	r3, r2, [r1]
 8002f7a:	617b      	str	r3, [r7, #20]
   return(result);
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1e5      	bne.n	8002f4e <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d004      	beq.n	8002f94 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fd20 	bl	80019d4 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fcef 	bl	8003978 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3740      	adds	r7, #64	; 0x40
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b0ba      	sub	sp, #232	; 0xe8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	695b      	ldr	r3, [r3, #20]
 8002fc6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fda:	f003 030f 	and.w	r3, r3, #15
 8002fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002fe2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d10f      	bne.n	800300a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fee:	f003 0320 	and.w	r3, r3, #32
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d009      	beq.n	800300a <HAL_UART_IRQHandler+0x66>
 8002ff6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ffa:	f003 0320 	and.w	r3, r3, #32
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fd97 	bl	8003b36 <UART_Receive_IT>
      return;
 8003008:	e256      	b.n	80034b8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800300a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800300e:	2b00      	cmp	r3, #0
 8003010:	f000 80de 	beq.w	80031d0 <HAL_UART_IRQHandler+0x22c>
 8003014:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b00      	cmp	r3, #0
 800301e:	d106      	bne.n	800302e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003020:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003024:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003028:	2b00      	cmp	r3, #0
 800302a:	f000 80d1 	beq.w	80031d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800302e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_UART_IRQHandler+0xae>
 800303a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800303e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0201 	orr.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d00b      	beq.n	8003076 <HAL_UART_IRQHandler+0xd2>
 800305e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003062:	f003 0301 	and.w	r3, r3, #1
 8003066:	2b00      	cmp	r3, #0
 8003068:	d005      	beq.n	8003076 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	f043 0202 	orr.w	r2, r3, #2
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00b      	beq.n	800309a <HAL_UART_IRQHandler+0xf6>
 8003082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d005      	beq.n	800309a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f043 0204 	orr.w	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0308 	and.w	r3, r3, #8
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d011      	beq.n	80030ca <HAL_UART_IRQHandler+0x126>
 80030a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80030b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030b6:	f003 0301 	and.w	r3, r3, #1
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d005      	beq.n	80030ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f043 0208 	orr.w	r2, r3, #8
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 81ed 	beq.w	80034ae <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030d8:	f003 0320 	and.w	r3, r3, #32
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_UART_IRQHandler+0x14e>
 80030e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fd22 	bl	8003b36 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fc:	2b40      	cmp	r3, #64	; 0x40
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	f003 0308 	and.w	r3, r3, #8
 8003112:	2b00      	cmp	r3, #0
 8003114:	d103      	bne.n	800311e <HAL_UART_IRQHandler+0x17a>
 8003116:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800311a:	2b00      	cmp	r3, #0
 800311c:	d04f      	beq.n	80031be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 fc2a 	bl	8003978 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312e:	2b40      	cmp	r3, #64	; 0x40
 8003130:	d141      	bne.n	80031b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3314      	adds	r3, #20
 8003138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003140:	e853 3f00 	ldrex	r3, [r3]
 8003144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800314c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800315e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800316a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800316e:	e841 2300 	strex	r3, r2, [r1]
 8003172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d1d9      	bne.n	8003132 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003182:	2b00      	cmp	r3, #0
 8003184:	d013      	beq.n	80031ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318a:	4a7d      	ldr	r2, [pc, #500]	; (8003380 <HAL_UART_IRQHandler+0x3dc>)
 800318c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe fc8e 	bl	8001ab4 <HAL_DMA_Abort_IT>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d016      	beq.n	80031cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031a8:	4610      	mov	r0, r2
 80031aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ac:	e00e      	b.n	80031cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f9a4 	bl	80034fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b4:	e00a      	b.n	80031cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f000 f9a0 	bl	80034fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031bc:	e006      	b.n	80031cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f000 f99c 	bl	80034fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80031ca:	e170      	b.n	80034ae <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031cc:	bf00      	nop
    return;
 80031ce:	e16e      	b.n	80034ae <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	f040 814a 	bne.w	800346e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	f000 8143 	beq.w	800346e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031ec:	f003 0310 	and.w	r3, r3, #16
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	f000 813c 	beq.w	800346e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	60bb      	str	r3, [r7, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	60bb      	str	r3, [r7, #8]
 800320a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003216:	2b40      	cmp	r3, #64	; 0x40
 8003218:	f040 80b4 	bne.w	8003384 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003228:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8140 	beq.w	80034b2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800323a:	429a      	cmp	r2, r3
 800323c:	f080 8139 	bcs.w	80034b2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003246:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003252:	f000 8088 	beq.w	8003366 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	330c      	adds	r3, #12
 800325c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003264:	e853 3f00 	ldrex	r3, [r3]
 8003268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800326c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	330c      	adds	r3, #12
 800327e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003282:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003286:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800328a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800328e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003292:	e841 2300 	strex	r3, r2, [r1]
 8003296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800329a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d1d9      	bne.n	8003256 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	3314      	adds	r3, #20
 80032a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032ac:	e853 3f00 	ldrex	r3, [r3]
 80032b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032b4:	f023 0301 	bic.w	r3, r3, #1
 80032b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	3314      	adds	r3, #20
 80032c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80032d2:	e841 2300 	strex	r3, r2, [r1]
 80032d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80032d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1e1      	bne.n	80032a2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	3314      	adds	r3, #20
 80032e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80032e8:	e853 3f00 	ldrex	r3, [r3]
 80032ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80032ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	3314      	adds	r3, #20
 80032fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003302:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e3      	bne.n	80032de <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003336:	f023 0310 	bic.w	r3, r3, #16
 800333a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	330c      	adds	r3, #12
 8003344:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003348:	65ba      	str	r2, [r7, #88]	; 0x58
 800334a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800334e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e3      	bne.n	8003324 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fb37 	bl	80019d4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800336e:	b29b      	uxth	r3, r3
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	b29b      	uxth	r3, r3
 8003374:	4619      	mov	r1, r3
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f000 f8ca 	bl	8003510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800337c:	e099      	b.n	80034b2 <HAL_UART_IRQHandler+0x50e>
 800337e:	bf00      	nop
 8003380:	08003a3f 	.word	0x08003a3f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800338c:	b29b      	uxth	r3, r3
 800338e:	1ad3      	subs	r3, r2, r3
 8003390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003398:	b29b      	uxth	r3, r3
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 808b 	beq.w	80034b6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80033a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8086 	beq.w	80034b6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	330c      	adds	r3, #12
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b4:	e853 3f00 	ldrex	r3, [r3]
 80033b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	330c      	adds	r3, #12
 80033ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80033ce:	647a      	str	r2, [r7, #68]	; 0x44
 80033d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80033d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80033dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e3      	bne.n	80033aa <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3314      	adds	r3, #20
 80033e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	623b      	str	r3, [r7, #32]
   return(result);
 80033f2:	6a3b      	ldr	r3, [r7, #32]
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	3314      	adds	r3, #20
 8003402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003406:	633a      	str	r2, [r7, #48]	; 0x30
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800340c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800340e:	e841 2300 	strex	r3, r2, [r1]
 8003412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1e3      	bne.n	80033e2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2220      	movs	r2, #32
 800341e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2200      	movs	r2, #0
 8003426:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	330c      	adds	r3, #12
 800342e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	60fb      	str	r3, [r7, #12]
   return(result);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	f023 0310 	bic.w	r3, r3, #16
 800343e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	330c      	adds	r3, #12
 8003448:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800344c:	61fa      	str	r2, [r7, #28]
 800344e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003450:	69b9      	ldr	r1, [r7, #24]
 8003452:	69fa      	ldr	r2, [r7, #28]
 8003454:	e841 2300 	strex	r3, r2, [r1]
 8003458:	617b      	str	r3, [r7, #20]
   return(result);
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d1e3      	bne.n	8003428 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003460:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003464:	4619      	mov	r1, r3
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f852 	bl	8003510 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800346c:	e023      	b.n	80034b6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800346e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003472:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003476:	2b00      	cmp	r3, #0
 8003478:	d009      	beq.n	800348e <HAL_UART_IRQHandler+0x4ea>
 800347a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800347e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003482:	2b00      	cmp	r3, #0
 8003484:	d003      	beq.n	800348e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 faed 	bl	8003a66 <UART_Transmit_IT>
    return;
 800348c:	e014      	b.n	80034b8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00e      	beq.n	80034b8 <HAL_UART_IRQHandler+0x514>
 800349a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800349e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fb2d 	bl	8003b06 <UART_EndTransmit_IT>
    return;
 80034ac:	e004      	b.n	80034b8 <HAL_UART_IRQHandler+0x514>
    return;
 80034ae:	bf00      	nop
 80034b0:	e002      	b.n	80034b8 <HAL_UART_IRQHandler+0x514>
      return;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_UART_IRQHandler+0x514>
      return;
 80034b6:	bf00      	nop
  }
}
 80034b8:	37e8      	adds	r7, #232	; 0xe8
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop

080034c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80034c8:	bf00      	nop
 80034ca:	370c      	adds	r7, #12
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr

080034d4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80034dc:	bf00      	nop
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b083      	sub	sp, #12
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80034f0:	bf00      	nop
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	460b      	mov	r3, r1
 800351a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b09c      	sub	sp, #112	; 0x70
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003534:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003540:	2b00      	cmp	r3, #0
 8003542:	d172      	bne.n	800362a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	2200      	movs	r2, #0
 8003548:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800354a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	330c      	adds	r3, #12
 8003550:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003554:	e853 3f00 	ldrex	r3, [r3]
 8003558:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800355a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800355c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003560:	66bb      	str	r3, [r7, #104]	; 0x68
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	330c      	adds	r3, #12
 8003568:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800356a:	65ba      	str	r2, [r7, #88]	; 0x58
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800356e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003570:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003572:	e841 2300 	strex	r3, r2, [r1]
 8003576:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1e5      	bne.n	800354a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800357e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	3314      	adds	r3, #20
 8003584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800358e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003590:	f023 0301 	bic.w	r3, r3, #1
 8003594:	667b      	str	r3, [r7, #100]	; 0x64
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	3314      	adds	r3, #20
 800359c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800359e:	647a      	str	r2, [r7, #68]	; 0x44
 80035a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80035a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80035ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e5      	bne.n	800357e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80035b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3314      	adds	r3, #20
 80035b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	623b      	str	r3, [r7, #32]
   return(result);
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035c8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3314      	adds	r3, #20
 80035d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d2:	633a      	str	r2, [r7, #48]	; 0x30
 80035d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80035e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80035e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035e8:	2220      	movs	r2, #32
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d119      	bne.n	800362a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	e853 3f00 	ldrex	r3, [r3]
 8003604:	60fb      	str	r3, [r7, #12]
   return(result);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f023 0310 	bic.w	r3, r3, #16
 800360c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800360e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	330c      	adds	r3, #12
 8003614:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003616:	61fa      	str	r2, [r7, #28]
 8003618:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	69b9      	ldr	r1, [r7, #24]
 800361c:	69fa      	ldr	r2, [r7, #28]
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	617b      	str	r3, [r7, #20]
   return(result);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e5      	bne.n	80035f6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800362a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	2b01      	cmp	r3, #1
 8003630:	d106      	bne.n	8003640 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003632:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003634:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003636:	4619      	mov	r1, r3
 8003638:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800363a:	f7ff ff69 	bl	8003510 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800363e:	e002      	b.n	8003646 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003640:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003642:	f7ff ff47 	bl	80034d4 <HAL_UART_RxCpltCallback>
}
 8003646:	bf00      	nop
 8003648:	3770      	adds	r7, #112	; 0x70
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b084      	sub	sp, #16
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003660:	2b01      	cmp	r3, #1
 8003662:	d108      	bne.n	8003676 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003668:	085b      	lsrs	r3, r3, #1
 800366a:	b29b      	uxth	r3, r3
 800366c:	4619      	mov	r1, r3
 800366e:	68f8      	ldr	r0, [r7, #12]
 8003670:	f7ff ff4e 	bl	8003510 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003674:	e002      	b.n	800367c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff ff36 	bl	80034e8 <HAL_UART_RxHalfCpltCallback>
}
 800367c:	bf00      	nop
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800368c:	2300      	movs	r3, #0
 800368e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003694:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a0:	2b80      	cmp	r3, #128	; 0x80
 80036a2:	bf0c      	ite	eq
 80036a4:	2301      	moveq	r3, #1
 80036a6:	2300      	movne	r3, #0
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	2b21      	cmp	r3, #33	; 0x21
 80036b6:	d108      	bne.n	80036ca <UART_DMAError+0x46>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d005      	beq.n	80036ca <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	2200      	movs	r2, #0
 80036c2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80036c4:	68b8      	ldr	r0, [r7, #8]
 80036c6:	f000 f92f 	bl	8003928 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b40      	cmp	r3, #64	; 0x40
 80036d6:	bf0c      	ite	eq
 80036d8:	2301      	moveq	r3, #1
 80036da:	2300      	movne	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	2b22      	cmp	r3, #34	; 0x22
 80036ea:	d108      	bne.n	80036fe <UART_DMAError+0x7a>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d005      	beq.n	80036fe <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	2200      	movs	r2, #0
 80036f6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80036f8:	68b8      	ldr	r0, [r7, #8]
 80036fa:	f000 f93d 	bl	8003978 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f043 0210 	orr.w	r2, r3, #16
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370a:	68b8      	ldr	r0, [r7, #8]
 800370c:	f7ff fef6 	bl	80034fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003710:	bf00      	nop
 8003712:	3710      	adds	r7, #16
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b090      	sub	sp, #64	; 0x40
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	603b      	str	r3, [r7, #0]
 8003724:	4613      	mov	r3, r2
 8003726:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003728:	e050      	b.n	80037cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800372a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800372c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003730:	d04c      	beq.n	80037cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003734:	2b00      	cmp	r3, #0
 8003736:	d007      	beq.n	8003748 <UART_WaitOnFlagUntilTimeout+0x30>
 8003738:	f7fd ff04 	bl	8001544 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003744:	429a      	cmp	r2, r3
 8003746:	d241      	bcs.n	80037cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	330c      	adds	r3, #12
 800374e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003752:	e853 3f00 	ldrex	r3, [r3]
 8003756:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800375e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003768:	637a      	str	r2, [r7, #52]	; 0x34
 800376a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800376e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003770:	e841 2300 	strex	r3, r2, [r1]
 8003774:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1e5      	bne.n	8003748 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3314      	adds	r3, #20
 8003782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	613b      	str	r3, [r7, #16]
   return(result);
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	f023 0301 	bic.w	r3, r3, #1
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3314      	adds	r3, #20
 800379a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800379c:	623a      	str	r2, [r7, #32]
 800379e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	69f9      	ldr	r1, [r7, #28]
 80037a2:	6a3a      	ldr	r2, [r7, #32]
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e5      	bne.n	800377c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2220      	movs	r2, #32
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2220      	movs	r2, #32
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80037c8:	2303      	movs	r3, #3
 80037ca:	e00f      	b.n	80037ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	4013      	ands	r3, r2
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	429a      	cmp	r2, r3
 80037da:	bf0c      	ite	eq
 80037dc:	2301      	moveq	r3, #1
 80037de:	2300      	movne	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	79fb      	ldrb	r3, [r7, #7]
 80037e6:	429a      	cmp	r2, r3
 80037e8:	d09f      	beq.n	800372a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3740      	adds	r7, #64	; 0x40
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}

080037f4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b098      	sub	sp, #96	; 0x60
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	4613      	mov	r3, r2
 8003800:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	88fa      	ldrh	r2, [r7, #6]
 800380c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2222      	movs	r2, #34	; 0x22
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	4a3e      	ldr	r2, [pc, #248]	; (800391c <UART_Start_Receive_DMA+0x128>)
 8003822:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	4a3d      	ldr	r2, [pc, #244]	; (8003920 <UART_Start_Receive_DMA+0x12c>)
 800382a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	4a3c      	ldr	r2, [pc, #240]	; (8003924 <UART_Start_Receive_DMA+0x130>)
 8003832:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003838:	2200      	movs	r2, #0
 800383a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800383c:	f107 0308 	add.w	r3, r7, #8
 8003840:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	3304      	adds	r3, #4
 800384c:	4619      	mov	r1, r3
 800384e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	f7fe f866 	bl	8001924 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	330c      	adds	r3, #12
 800387c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800387e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003880:	e853 3f00 	ldrex	r3, [r3]
 8003884:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	65bb      	str	r3, [r7, #88]	; 0x58
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	330c      	adds	r3, #12
 8003894:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003896:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003898:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800389c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800389e:	e841 2300 	strex	r3, r2, [r1]
 80038a2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80038a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d1e5      	bne.n	8003876 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	3314      	adds	r3, #20
 80038b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b4:	e853 3f00 	ldrex	r3, [r3]
 80038b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038bc:	f043 0301 	orr.w	r3, r3, #1
 80038c0:	657b      	str	r3, [r7, #84]	; 0x54
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3314      	adds	r3, #20
 80038c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80038ca:	63ba      	str	r2, [r7, #56]	; 0x38
 80038cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ce:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80038d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038d2:	e841 2300 	strex	r3, r2, [r1]
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d1e5      	bne.n	80038aa <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	3314      	adds	r3, #20
 80038e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	617b      	str	r3, [r7, #20]
   return(result);
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038f4:	653b      	str	r3, [r7, #80]	; 0x50
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	3314      	adds	r3, #20
 80038fc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80038fe:	627a      	str	r2, [r7, #36]	; 0x24
 8003900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003902:	6a39      	ldr	r1, [r7, #32]
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	e841 2300 	strex	r3, r2, [r1]
 800390a:	61fb      	str	r3, [r7, #28]
   return(result);
 800390c:	69fb      	ldr	r3, [r7, #28]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1e5      	bne.n	80038de <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8003912:	2300      	movs	r3, #0
}
 8003914:	4618      	mov	r0, r3
 8003916:	3760      	adds	r7, #96	; 0x60
 8003918:	46bd      	mov	sp, r7
 800391a:	bd80      	pop	{r7, pc}
 800391c:	08003529 	.word	0x08003529
 8003920:	0800364f 	.word	0x0800364f
 8003924:	08003685 	.word	0x08003685

08003928 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003928:	b480      	push	{r7}
 800392a:	b089      	sub	sp, #36	; 0x24
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	330c      	adds	r3, #12
 8003936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	e853 3f00 	ldrex	r3, [r3]
 800393e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003946:	61fb      	str	r3, [r7, #28]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	330c      	adds	r3, #12
 800394e:	69fa      	ldr	r2, [r7, #28]
 8003950:	61ba      	str	r2, [r7, #24]
 8003952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6979      	ldr	r1, [r7, #20]
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	613b      	str	r3, [r7, #16]
   return(result);
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e5      	bne.n	8003930 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2220      	movs	r2, #32
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800396c:	bf00      	nop
 800396e:	3724      	adds	r7, #36	; 0x24
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b095      	sub	sp, #84	; 0x54
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	330c      	adds	r3, #12
 8003986:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398a:	e853 3f00 	ldrex	r3, [r3]
 800398e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003992:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003996:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	330c      	adds	r3, #12
 800399e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039a0:	643a      	str	r2, [r7, #64]	; 0x40
 80039a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039a8:	e841 2300 	strex	r3, r2, [r1]
 80039ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1e5      	bne.n	8003980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039bc:	6a3b      	ldr	r3, [r7, #32]
 80039be:	e853 3f00 	ldrex	r3, [r3]
 80039c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f023 0301 	bic.w	r3, r3, #1
 80039ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	3314      	adds	r3, #20
 80039d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80039da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039dc:	e841 2300 	strex	r3, r2, [r1]
 80039e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80039e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1e5      	bne.n	80039b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d119      	bne.n	8003a24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	330c      	adds	r3, #12
 80039f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	e853 3f00 	ldrex	r3, [r3]
 80039fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	f023 0310 	bic.w	r3, r3, #16
 8003a06:	647b      	str	r3, [r7, #68]	; 0x44
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	330c      	adds	r3, #12
 8003a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003a10:	61ba      	str	r2, [r7, #24]
 8003a12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a14:	6979      	ldr	r1, [r7, #20]
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	e841 2300 	strex	r3, r2, [r1]
 8003a1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d1e5      	bne.n	80039f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a32:	bf00      	nop
 8003a34:	3754      	adds	r7, #84	; 0x54
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr

08003a3e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a4a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2200      	movs	r2, #0
 8003a56:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f7ff fd4f 	bl	80034fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a5e:	bf00      	nop
 8003a60:	3710      	adds	r7, #16
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}

08003a66 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b085      	sub	sp, #20
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a74:	b2db      	uxtb	r3, r3
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d13e      	bne.n	8003af8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a82:	d114      	bne.n	8003aae <UART_Transmit_IT+0x48>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d110      	bne.n	8003aae <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	881b      	ldrh	r3, [r3, #0]
 8003a96:	461a      	mov	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003aa0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	621a      	str	r2, [r3, #32]
 8003aac:	e008      	b.n	8003ac0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a1b      	ldr	r3, [r3, #32]
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6211      	str	r1, [r2, #32]
 8003ab8:	781a      	ldrb	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ac4:	b29b      	uxth	r3, r3
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4619      	mov	r1, r3
 8003ace:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d10f      	bne.n	8003af4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	68da      	ldr	r2, [r3, #12]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ae2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68da      	ldr	r2, [r3, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003af2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003af4:	2300      	movs	r3, #0
 8003af6:	e000      	b.n	8003afa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003af8:	2302      	movs	r3, #2
  }
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3714      	adds	r7, #20
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr

08003b06 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b06:	b580      	push	{r7, lr}
 8003b08:	b082      	sub	sp, #8
 8003b0a:	af00      	add	r7, sp, #0
 8003b0c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68da      	ldr	r2, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2220      	movs	r2, #32
 8003b22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7ff fcca 	bl	80034c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b08c      	sub	sp, #48	; 0x30
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b22      	cmp	r3, #34	; 0x22
 8003b48:	f040 80ab 	bne.w	8003ca2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b54:	d117      	bne.n	8003b86 <UART_Receive_IT+0x50>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d113      	bne.n	8003b86 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b74:	b29a      	uxth	r2, r3
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7e:	1c9a      	adds	r2, r3, #2
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	629a      	str	r2, [r3, #40]	; 0x28
 8003b84:	e026      	b.n	8003bd4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b98:	d007      	beq.n	8003baa <UART_Receive_IT+0x74>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <UART_Receive_IT+0x82>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb4:	701a      	strb	r2, [r3, #0]
 8003bb6:	e008      	b.n	8003bca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bc4:	b2da      	uxtb	r2, r3
 8003bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29b      	uxth	r3, r3
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	4619      	mov	r1, r3
 8003be2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d15a      	bne.n	8003c9e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	68da      	ldr	r2, [r3, #12]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0220 	bic.w	r2, r2, #32
 8003bf6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	68da      	ldr	r2, [r3, #12]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	695a      	ldr	r2, [r3, #20]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f022 0201 	bic.w	r2, r2, #1
 8003c16:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d135      	bne.n	8003c94 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	330c      	adds	r3, #12
 8003c34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	e853 3f00 	ldrex	r3, [r3]
 8003c3c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f023 0310 	bic.w	r3, r3, #16
 8003c44:	627b      	str	r3, [r7, #36]	; 0x24
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	330c      	adds	r3, #12
 8003c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4e:	623a      	str	r2, [r7, #32]
 8003c50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c52:	69f9      	ldr	r1, [r7, #28]
 8003c54:	6a3a      	ldr	r2, [r7, #32]
 8003c56:	e841 2300 	strex	r3, r2, [r1]
 8003c5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e5      	bne.n	8003c2e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0310 	and.w	r3, r3, #16
 8003c6c:	2b10      	cmp	r3, #16
 8003c6e:	d10a      	bne.n	8003c86 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c70:	2300      	movs	r3, #0
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	60fb      	str	r3, [r7, #12]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]
 8003c84:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c8a:	4619      	mov	r1, r3
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff fc3f 	bl	8003510 <HAL_UARTEx_RxEventCallback>
 8003c92:	e002      	b.n	8003c9a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fc1d 	bl	80034d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	e002      	b.n	8003ca4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e000      	b.n	8003ca4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003ca2:	2302      	movs	r3, #2
  }
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3730      	adds	r7, #48	; 0x30
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cb0:	b09f      	sub	sp, #124	; 0x7c
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc2:	68d9      	ldr	r1, [r3, #12]
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	ea40 0301 	orr.w	r3, r0, r1
 8003ccc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd4:	691b      	ldr	r3, [r3, #16]
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	431a      	orrs	r2, r3
 8003cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce0:	69db      	ldr	r3, [r3, #28]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003cf0:	f021 010c 	bic.w	r1, r1, #12
 8003cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfa:	430b      	orrs	r3, r1
 8003cfc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0a:	6999      	ldr	r1, [r3, #24]
 8003d0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	ea40 0301 	orr.w	r3, r0, r1
 8003d14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	4bc5      	ldr	r3, [pc, #788]	; (8004030 <UART_SetConfig+0x384>)
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d004      	beq.n	8003d2a <UART_SetConfig+0x7e>
 8003d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	4bc3      	ldr	r3, [pc, #780]	; (8004034 <UART_SetConfig+0x388>)
 8003d26:	429a      	cmp	r2, r3
 8003d28:	d103      	bne.n	8003d32 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003d2a:	f7fe ff99 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8003d2e:	6778      	str	r0, [r7, #116]	; 0x74
 8003d30:	e002      	b.n	8003d38 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d32:	f7fe ff81 	bl	8002c38 <HAL_RCC_GetPCLK1Freq>
 8003d36:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d40:	f040 80b6 	bne.w	8003eb0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d46:	461c      	mov	r4, r3
 8003d48:	f04f 0500 	mov.w	r5, #0
 8003d4c:	4622      	mov	r2, r4
 8003d4e:	462b      	mov	r3, r5
 8003d50:	1891      	adds	r1, r2, r2
 8003d52:	6439      	str	r1, [r7, #64]	; 0x40
 8003d54:	415b      	adcs	r3, r3
 8003d56:	647b      	str	r3, [r7, #68]	; 0x44
 8003d58:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003d5c:	1912      	adds	r2, r2, r4
 8003d5e:	eb45 0303 	adc.w	r3, r5, r3
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f04f 0100 	mov.w	r1, #0
 8003d6a:	00d9      	lsls	r1, r3, #3
 8003d6c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d70:	00d0      	lsls	r0, r2, #3
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	1911      	adds	r1, r2, r4
 8003d78:	6639      	str	r1, [r7, #96]	; 0x60
 8003d7a:	416b      	adcs	r3, r5
 8003d7c:	667b      	str	r3, [r7, #100]	; 0x64
 8003d7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	461a      	mov	r2, r3
 8003d84:	f04f 0300 	mov.w	r3, #0
 8003d88:	1891      	adds	r1, r2, r2
 8003d8a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d8c:	415b      	adcs	r3, r3
 8003d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d94:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d98:	f7fc fd60 	bl	800085c <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4ba5      	ldr	r3, [pc, #660]	; (8004038 <UART_SetConfig+0x38c>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	011e      	lsls	r6, r3, #4
 8003daa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dac:	461c      	mov	r4, r3
 8003dae:	f04f 0500 	mov.w	r5, #0
 8003db2:	4622      	mov	r2, r4
 8003db4:	462b      	mov	r3, r5
 8003db6:	1891      	adds	r1, r2, r2
 8003db8:	6339      	str	r1, [r7, #48]	; 0x30
 8003dba:	415b      	adcs	r3, r3
 8003dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dbe:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003dc2:	1912      	adds	r2, r2, r4
 8003dc4:	eb45 0303 	adc.w	r3, r5, r3
 8003dc8:	f04f 0000 	mov.w	r0, #0
 8003dcc:	f04f 0100 	mov.w	r1, #0
 8003dd0:	00d9      	lsls	r1, r3, #3
 8003dd2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003dd6:	00d0      	lsls	r0, r2, #3
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	1911      	adds	r1, r2, r4
 8003dde:	65b9      	str	r1, [r7, #88]	; 0x58
 8003de0:	416b      	adcs	r3, r5
 8003de2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	461a      	mov	r2, r3
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	1891      	adds	r1, r2, r2
 8003df0:	62b9      	str	r1, [r7, #40]	; 0x28
 8003df2:	415b      	adcs	r3, r3
 8003df4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003df6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dfa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003dfe:	f7fc fd2d 	bl	800085c <__aeabi_uldivmod>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4b8c      	ldr	r3, [pc, #560]	; (8004038 <UART_SetConfig+0x38c>)
 8003e08:	fba3 1302 	umull	r1, r3, r3, r2
 8003e0c:	095b      	lsrs	r3, r3, #5
 8003e0e:	2164      	movs	r1, #100	; 0x64
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	00db      	lsls	r3, r3, #3
 8003e18:	3332      	adds	r3, #50	; 0x32
 8003e1a:	4a87      	ldr	r2, [pc, #540]	; (8004038 <UART_SetConfig+0x38c>)
 8003e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e20:	095b      	lsrs	r3, r3, #5
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003e28:	441e      	add	r6, r3
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f04f 0100 	mov.w	r1, #0
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	1894      	adds	r4, r2, r2
 8003e38:	623c      	str	r4, [r7, #32]
 8003e3a:	415b      	adcs	r3, r3
 8003e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e42:	1812      	adds	r2, r2, r0
 8003e44:	eb41 0303 	adc.w	r3, r1, r3
 8003e48:	f04f 0400 	mov.w	r4, #0
 8003e4c:	f04f 0500 	mov.w	r5, #0
 8003e50:	00dd      	lsls	r5, r3, #3
 8003e52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e56:	00d4      	lsls	r4, r2, #3
 8003e58:	4622      	mov	r2, r4
 8003e5a:	462b      	mov	r3, r5
 8003e5c:	1814      	adds	r4, r2, r0
 8003e5e:	653c      	str	r4, [r7, #80]	; 0x50
 8003e60:	414b      	adcs	r3, r1
 8003e62:	657b      	str	r3, [r7, #84]	; 0x54
 8003e64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	f04f 0300 	mov.w	r3, #0
 8003e6e:	1891      	adds	r1, r2, r2
 8003e70:	61b9      	str	r1, [r7, #24]
 8003e72:	415b      	adcs	r3, r3
 8003e74:	61fb      	str	r3, [r7, #28]
 8003e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e7a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e7e:	f7fc fced 	bl	800085c <__aeabi_uldivmod>
 8003e82:	4602      	mov	r2, r0
 8003e84:	460b      	mov	r3, r1
 8003e86:	4b6c      	ldr	r3, [pc, #432]	; (8004038 <UART_SetConfig+0x38c>)
 8003e88:	fba3 1302 	umull	r1, r3, r3, r2
 8003e8c:	095b      	lsrs	r3, r3, #5
 8003e8e:	2164      	movs	r1, #100	; 0x64
 8003e90:	fb01 f303 	mul.w	r3, r1, r3
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	00db      	lsls	r3, r3, #3
 8003e98:	3332      	adds	r3, #50	; 0x32
 8003e9a:	4a67      	ldr	r2, [pc, #412]	; (8004038 <UART_SetConfig+0x38c>)
 8003e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ea0:	095b      	lsrs	r3, r3, #5
 8003ea2:	f003 0207 	and.w	r2, r3, #7
 8003ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4432      	add	r2, r6
 8003eac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003eae:	e0b9      	b.n	8004024 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003eb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003eb2:	461c      	mov	r4, r3
 8003eb4:	f04f 0500 	mov.w	r5, #0
 8003eb8:	4622      	mov	r2, r4
 8003eba:	462b      	mov	r3, r5
 8003ebc:	1891      	adds	r1, r2, r2
 8003ebe:	6139      	str	r1, [r7, #16]
 8003ec0:	415b      	adcs	r3, r3
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003ec8:	1912      	adds	r2, r2, r4
 8003eca:	eb45 0303 	adc.w	r3, r5, r3
 8003ece:	f04f 0000 	mov.w	r0, #0
 8003ed2:	f04f 0100 	mov.w	r1, #0
 8003ed6:	00d9      	lsls	r1, r3, #3
 8003ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003edc:	00d0      	lsls	r0, r2, #3
 8003ede:	4602      	mov	r2, r0
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	eb12 0804 	adds.w	r8, r2, r4
 8003ee6:	eb43 0905 	adc.w	r9, r3, r5
 8003eea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f04f 0100 	mov.w	r1, #0
 8003ef4:	f04f 0200 	mov.w	r2, #0
 8003ef8:	f04f 0300 	mov.w	r3, #0
 8003efc:	008b      	lsls	r3, r1, #2
 8003efe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f02:	0082      	lsls	r2, r0, #2
 8003f04:	4640      	mov	r0, r8
 8003f06:	4649      	mov	r1, r9
 8003f08:	f7fc fca8 	bl	800085c <__aeabi_uldivmod>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4b49      	ldr	r3, [pc, #292]	; (8004038 <UART_SetConfig+0x38c>)
 8003f12:	fba3 2302 	umull	r2, r3, r3, r2
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	011e      	lsls	r6, r3, #4
 8003f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f04f 0100 	mov.w	r1, #0
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	1894      	adds	r4, r2, r2
 8003f28:	60bc      	str	r4, [r7, #8]
 8003f2a:	415b      	adcs	r3, r3
 8003f2c:	60fb      	str	r3, [r7, #12]
 8003f2e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003f32:	1812      	adds	r2, r2, r0
 8003f34:	eb41 0303 	adc.w	r3, r1, r3
 8003f38:	f04f 0400 	mov.w	r4, #0
 8003f3c:	f04f 0500 	mov.w	r5, #0
 8003f40:	00dd      	lsls	r5, r3, #3
 8003f42:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f46:	00d4      	lsls	r4, r2, #3
 8003f48:	4622      	mov	r2, r4
 8003f4a:	462b      	mov	r3, r5
 8003f4c:	1814      	adds	r4, r2, r0
 8003f4e:	64bc      	str	r4, [r7, #72]	; 0x48
 8003f50:	414b      	adcs	r3, r1
 8003f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f04f 0100 	mov.w	r1, #0
 8003f5e:	f04f 0200 	mov.w	r2, #0
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	008b      	lsls	r3, r1, #2
 8003f68:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f6c:	0082      	lsls	r2, r0, #2
 8003f6e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003f72:	f7fc fc73 	bl	800085c <__aeabi_uldivmod>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4b2f      	ldr	r3, [pc, #188]	; (8004038 <UART_SetConfig+0x38c>)
 8003f7c:	fba3 1302 	umull	r1, r3, r3, r2
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	2164      	movs	r1, #100	; 0x64
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	3332      	adds	r3, #50	; 0x32
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <UART_SetConfig+0x38c>)
 8003f90:	fba2 2303 	umull	r2, r3, r2, r3
 8003f94:	095b      	lsrs	r3, r3, #5
 8003f96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f9a:	441e      	add	r6, r3
 8003f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f04f 0100 	mov.w	r1, #0
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	460b      	mov	r3, r1
 8003fa8:	1894      	adds	r4, r2, r2
 8003faa:	603c      	str	r4, [r7, #0]
 8003fac:	415b      	adcs	r3, r3
 8003fae:	607b      	str	r3, [r7, #4]
 8003fb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb4:	1812      	adds	r2, r2, r0
 8003fb6:	eb41 0303 	adc.w	r3, r1, r3
 8003fba:	f04f 0400 	mov.w	r4, #0
 8003fbe:	f04f 0500 	mov.w	r5, #0
 8003fc2:	00dd      	lsls	r5, r3, #3
 8003fc4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003fc8:	00d4      	lsls	r4, r2, #3
 8003fca:	4622      	mov	r2, r4
 8003fcc:	462b      	mov	r3, r5
 8003fce:	eb12 0a00 	adds.w	sl, r2, r0
 8003fd2:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	008b      	lsls	r3, r1, #2
 8003fea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003fee:	0082      	lsls	r2, r0, #2
 8003ff0:	4650      	mov	r0, sl
 8003ff2:	4659      	mov	r1, fp
 8003ff4:	f7fc fc32 	bl	800085c <__aeabi_uldivmod>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4b0e      	ldr	r3, [pc, #56]	; (8004038 <UART_SetConfig+0x38c>)
 8003ffe:	fba3 1302 	umull	r1, r3, r3, r2
 8004002:	095b      	lsrs	r3, r3, #5
 8004004:	2164      	movs	r1, #100	; 0x64
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	011b      	lsls	r3, r3, #4
 800400e:	3332      	adds	r3, #50	; 0x32
 8004010:	4a09      	ldr	r2, [pc, #36]	; (8004038 <UART_SetConfig+0x38c>)
 8004012:	fba2 2303 	umull	r2, r3, r2, r3
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4432      	add	r2, r6
 8004022:	609a      	str	r2, [r3, #8]
}
 8004024:	bf00      	nop
 8004026:	377c      	adds	r7, #124	; 0x7c
 8004028:	46bd      	mov	sp, r7
 800402a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800402e:	bf00      	nop
 8004030:	40011000 	.word	0x40011000
 8004034:	40011400 	.word	0x40011400
 8004038:	51eb851f 	.word	0x51eb851f

0800403c <__libc_init_array>:
 800403c:	b570      	push	{r4, r5, r6, lr}
 800403e:	4d0d      	ldr	r5, [pc, #52]	; (8004074 <__libc_init_array+0x38>)
 8004040:	4c0d      	ldr	r4, [pc, #52]	; (8004078 <__libc_init_array+0x3c>)
 8004042:	1b64      	subs	r4, r4, r5
 8004044:	10a4      	asrs	r4, r4, #2
 8004046:	2600      	movs	r6, #0
 8004048:	42a6      	cmp	r6, r4
 800404a:	d109      	bne.n	8004060 <__libc_init_array+0x24>
 800404c:	4d0b      	ldr	r5, [pc, #44]	; (800407c <__libc_init_array+0x40>)
 800404e:	4c0c      	ldr	r4, [pc, #48]	; (8004080 <__libc_init_array+0x44>)
 8004050:	f000 f820 	bl	8004094 <_init>
 8004054:	1b64      	subs	r4, r4, r5
 8004056:	10a4      	asrs	r4, r4, #2
 8004058:	2600      	movs	r6, #0
 800405a:	42a6      	cmp	r6, r4
 800405c:	d105      	bne.n	800406a <__libc_init_array+0x2e>
 800405e:	bd70      	pop	{r4, r5, r6, pc}
 8004060:	f855 3b04 	ldr.w	r3, [r5], #4
 8004064:	4798      	blx	r3
 8004066:	3601      	adds	r6, #1
 8004068:	e7ee      	b.n	8004048 <__libc_init_array+0xc>
 800406a:	f855 3b04 	ldr.w	r3, [r5], #4
 800406e:	4798      	blx	r3
 8004070:	3601      	adds	r6, #1
 8004072:	e7f2      	b.n	800405a <__libc_init_array+0x1e>
 8004074:	080040e4 	.word	0x080040e4
 8004078:	080040e4 	.word	0x080040e4
 800407c:	080040e4 	.word	0x080040e4
 8004080:	080040e8 	.word	0x080040e8

08004084 <memset>:
 8004084:	4402      	add	r2, r0
 8004086:	4603      	mov	r3, r0
 8004088:	4293      	cmp	r3, r2
 800408a:	d100      	bne.n	800408e <memset+0xa>
 800408c:	4770      	bx	lr
 800408e:	f803 1b01 	strb.w	r1, [r3], #1
 8004092:	e7f9      	b.n	8004088 <memset+0x4>

08004094 <_init>:
 8004094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004096:	bf00      	nop
 8004098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800409a:	bc08      	pop	{r3}
 800409c:	469e      	mov	lr, r3
 800409e:	4770      	bx	lr

080040a0 <_fini>:
 80040a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040a2:	bf00      	nop
 80040a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a6:	bc08      	pop	{r3}
 80040a8:	469e      	mov	lr, r3
 80040aa:	4770      	bx	lr
